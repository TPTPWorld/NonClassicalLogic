%------------------------------------------------------------------------------
#include('Logics/THF001_1.logic').
%------------------------------------------------------------------------------
thf(box_type,type,
    $box: $o > $o ).

thf(box_i_type,type,
    $box_i: $i > $o > $o ).

thf(box_int_type,type,
    $box_int: $int > $o > $o ).

thf(box_P_type,type,(
    $box_P: !>[T: $tType] : ( T > $o > $o ) )).

thf(box_i_defn,definition,(
    $box_i = ( $box_P @ $i ) )).

thf(box_int_defn,definition,(
    $box_int = ( $box_P @ $int ) )).

thf(box_defn,definition,(
    $box = ( $box_int @ 0 ) )).

thf(dia_type,type,
    $dia: $o > $o ).

thf(dia_i_type,type,
    $dia_i: $i > $o > $o ).

thf(dia_int_type,type,
    $dia_int: $int > $o > $o ).

thf(dia_P_type,type,(
    $dia_P: !>[T: $tType] : ( T > $o > $o ) )).

thf(dia_i_defn,definition,(
    $dia_i = ( $dia_P @ $i ) )).

thf(dia_int_defn,definition,(
    $dia_int = ( $dia_P @ $int ) )).

thf(dia_defn,definition,(
    $dia = ( $dia_int @ 0 ) )).

thf(modal_truth,logic,
    $modal :=
        [ $truth_values := [ $true, $false ] ).

thf(modal,logic_options,
    $modal :=
      [ $constants :=
          [ $rigid, $flexible ],
        $quantification :=
          [ $constant, $varying, $cumulative, $decreasing ],
        $consequence :=
          [ $local, $global ],
        $modalities :=
          [ $system_K, $system_T, $system_D, $system_S4, $system_S5,
            $axiom_K, $axiom_T, $axiom_B, $axiom_D, $axiom_4, $axiom_5 ]
      ] ).

%----The $constants, $quantification, and $consequence apply to all of the
%----$modalities. Each of these may be specified only once, but not necessarily
%----all in a single annotated formula.

% <logic_defn_rule>      :== <logic_defn_LHS> <assignment> <logic_defn_RHS>
% <logic_defn_LHS>       ::= <defined_constant> | <thf_top_level_type>  | <name>
% <logic_defn_RHS>       :== <defined_constant> | <thf_unitary_formula>
%----If the <logic_defn_RHS> is a tuple, the first value is the default, and
%----the others have to be assignments for exceptions. Assignments can be
%----for constants, types, named formulae.
%------------------------------------------------------------------------------

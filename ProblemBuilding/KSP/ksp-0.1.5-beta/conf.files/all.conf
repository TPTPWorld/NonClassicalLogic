// All options
// Just comment what you do not want to appyly

% This is also a comment

/*

You can write block comments as well.
This is quite helpful when selecting just a few options.

*/


// Redundancy Elimination

// Pure Literal Elimination


set(mle).          // Modal level elimination: if there is no diamond, we satisfy all positive modal clauses (by taking the empty relation).
set(satmle).       // If the last modal level is saturated and a contradiction was not found, then we can delete clauses at that modal level.
set(mlple).        // Modal level pure literal elimination.
set(ple).          // Pure literal elimination; if mlple is on, this is redundant.
set(early_ple).    // Removes pure literals prior to transformation into the normal form.
set(early_mlple).  // Removes pure literals, by modal level, prior to transformation into the normal form.

// Subsumption
// Note that if forward or backward are set, then self subsumption is applied to both the sos and the usable.

set(forward).        // Lazy forward subsumption: it only checks for subsumption when clause is chosen; only against usable.
set(backward).       // Also lazy; only against the usable.
set(sos_subsumption) // If any of the above is on and this is set, also performs lazy subsumption against the sos.

// More on redundancy

set(check_full_repeated). // Repetition of clauses in only checked against the set where the clause is about to be included. If you want to check for repetition in the whole set of clauses, you should set this option.

// Clause Selection

set(newest).
set(oldest).
set(shortest).
set(greatest). // Chooses the shortest clause for the greatest maximal literal occurring in the SOS (note this is going to try to choose positive clauses for the max literal in the set).
set(smallest). // Chooses the shortest clause for the smallest maximal literal occurring in the SOS (note this is going to try to choose negative clauses for the max literal in the set, because -x > -y, if x > y).

// Level Selection. The default is none.

set(order_level,ascending).
set(order_level,descending).
set(order_level,shuffle).

// Populating the Usable

set(populate_usable,negative).         // Only negative clauses.
set(populate_usable,positive).         // Only positive clauses.
set(populate_usable,non_negative).     // Positive and mixed clauses.
set(populate_usable,non_positive).     // Negative and mixed clauses.
set(populate_usable,max_lit_positive). // Positive clauses and mixed clauses where the max literal is positive.
set(populate_usable,max_lit_negative). // Negative clauses and mixed clauses where the max literal is negative.

// Setting an ordering for propositional symbols occurring in the input formula.
// If p1 > p2 > p3, then ordering is set as follows:

set(order,p1,p2,p3).

// In the above case, the order on literals is: p1 > ~p1 > p2 > ~p2 > p3 > ~p3.

// Refinements
// Only one of them can be chosen.

set(ordered).
set(negative).
set(positive).
set(negative_ordered).  // This is actually negative+ordered resolution.
set(ordered_selection). // Negative literals are selected.
set(diamond_restricted_resolution). // This uses another level of labels, one for diamond.

// Extended Normal Form

// Only one of those options might be set.
// If any of those are set, then MRES and GEN2 are not applied, unless explicitely set. See below.

set(snf-).  // Renames positive literals in the scope of modal operators by negative literals.
set(snf+).  // Renames negative literals in the scope of modal operators by positive literals.
set(snf++). // This renames all literals in the scope of modal operators by positive ones.
set(snf--). // This renames all literals in the scope of modal operators by negative ones.
set(prenex).
set(antiprenex).
set(cnf).   // This does distribution *before* transformation into normal form.

// Renaming options

set(normal_renaming).          // Adds a new propositional symbol and the definition (just one side of the implication) for each formula being renamed.
set(limited_reuse_renaming).   // This reuses definitions already added to the set of clauses.
set(extensive_reuse_renaming). // If p defines phi and the NNF of ~phi is to be renamed, we use ~p to rename ~phi (and add the other side of the implication to the clause set).
set(conjunct_renaming).        // This renames conjuncts before adding the definitions. 

// Simplification

set(nnfsimp).  // Simplification is off by default. You need to turn on simplification if you want this to be performed.
set(bnfsimp).  // Translates into box normal form before applying simplification; it turns nnfsimp on.

// Prover Modes
// Default is local.

set(global).
set(local).
set(parallel,4). // The second parameter is the max number of threads. This hasn't been fully tested yet.

// Inference Rules

// If ires is set, we apply the calculus in the JAL paper (with IRES1 and IRES2).
// Otherwise, we apply the calculus given in the Tableaux 2015 paper.

set(ires). // Applies initial resolution.

// If the global2local is set, then the transformation into the normal form is performed top down and it uses the global to local transformations given in the CADE-28 paper.

set(global2local).

// Setting rules for modal operators.

set(box,<axioms_or_rules>).

// sets the [1] operator to be processed according to a list of axioms. For instance:

set(box 1, trans, ref).

// says that [1] is a S4 modality.

set(box 2, trans, sym, ref).

// says that box 2 is a S5 modality. Note that the above will use inference rules/transformations for transitivity, symmetry and reflexivity. You can choose whatever rules you want. Another implementation of the calculus for S5 could use the following:

set(box 2, five, ref).

// the axioms are FOUR,FIVE,SYM,TRANS,SER; you can also use the inference rule's name as given in the papers. The res_pqrs rules are given in the 2014 IJCAR paper.

// For transitity  TRANS = FOUR1, FOUR2, or FOUR = (FOUR1 | FOUR2) uses both rules, 
// For Euclideaness: EUC1, EUC2, or FIVE = (EUC1 | EUC2), res_1011, res_1110
// For reflexivity T, REF, res_0100, res_0001
// For symmetry: SYM, res_1100
// For seriality: SER, res_0101

// Unit Resolution
// If you want propagation, you'll also need to turn ml_ple on. See above.

set(unit).     // Propagate unit clauses to literal clauses and to the right-hand side of modal clauses.
set(lhs_unit). // apply unit resolution to the left-hand side of modal clauses; it turns unit on.

// Diamond Propagation
// If there is only one negative modal clause in a particular modal level, then we can propagate the literal in its scope.
// Note that <> false does not occur in the clause set, as clauses are kept simplified.

set(propdia).

// The following rules are applied if the normal form is not extended. However, they can be applied *before* extending the normal form by setting them as follows. The effect is that "small" clauses will be available just before entering the prover's main loop.

set(mres). // When this is set, MRES is performed during preprocessing before generating snf+, snf++, snf-, snf--.
set(gen2). // When this is set, GEN2 is performed during preprocessing before generating snf+, snf++, snf-, snf--.

// Printing Options

set(print_deleted).
set(print_proofs).
set(print_generated).

set(verbosity,1). // Goes up to 7. Default is 0 (quiet).
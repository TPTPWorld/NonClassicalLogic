%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:03 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(d_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_D),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_serial, axiom, (! [W:'$world']: ((? [V:'$world']: ('$accessible_world'(W,V)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(u_decl, type, u: $i).
tff(one_decl, type, one: $i).
tff(number_decl, type, number: (('$world' * $i * $i) > $o)).
tff(string_decl, type, string: (('$world' * $i) > $o)).
tff(in_decl, type, in: (('$world' * $i * $i * $i) > $o)).
tff(do_decl, type, do: (('$world' * $i * $i * $i) > $o)).
tff(entry_box_decl, type, entry_box: (('$world' * $i) > $o)).
tff(userid_decl, type, userid: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(ax1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [I:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (userid(W0,u,I) & string(W0,I))))))))))).
tff(ax2, axiom, (? [B:$i]: ((! [W:'$world']: (('$accessible_world'('$local_world',W) => (entry_box(W,B) & number(W,B,one)))))))).
tff(ax3, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [S:$i,I:$i,B:$i]: (((string(W,I) & entry_box(W,B)) => (? [A:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [S2:$i]: ((do(W0,S,A,S2) => in(W0,I,B,S2)))))))))))))))).
tff(con, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [I:$i,B:$i,A:$i,S:$i]: (((! [W0:'$world']: (('$accessible_world'(W,W0) => (userid(W0,u,I) & (entry_box(W0,B) & number(W0,B,one)))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [S2:$i]: ((do(W0,S,A,S2) => in(W0,I,B,S2)))))))))))))).

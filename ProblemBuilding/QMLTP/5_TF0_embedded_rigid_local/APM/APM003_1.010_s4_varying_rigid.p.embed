%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:04 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
tff(mrel_transitive, axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'(W,V) & '$accessible_world'(V,U)) => '$accessible_world'(W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(u_decl, type, u: $i).
tff(one_decl, type, one: $i).
tff(number_decl, type, number: (('$world' * $i * $i) > $o)).
tff(string_decl, type, string: (('$world' * $i) > $o)).
tff(in_decl, type, in: (('$world' * $i * $i * $i) > $o)).
tff(do_decl, type, do: (('$world' * $i * $i * $i) > $o)).
tff(entry_box_decl, type, entry_box: (('$world' * $i) > $o)).
tff(userid_decl, type, userid: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_u_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,u)))).
tff('$exists_in_world_one_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,one)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(ax1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [I:$i]: (('$exists_in_world_$i'(W,I) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (userid(W0,u,I) & string(W0,I)))))))))))).
tff(ax2, axiom, (? [B:$i]: (('$exists_in_world_$i'('$local_world',B) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => (entry_box(W,B) & number(W,B,one))))))))).
tff(ax3, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [S:$i,I:$i,B:$i]: (((('$exists_in_world_$i'(W,S) & '$exists_in_world_$i'(W,I)) & '$exists_in_world_$i'(W,B)) => ((string(W,I) & entry_box(W,B)) => (? [A:$i]: (('$exists_in_world_$i'(W,A) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [S2:$i]: (('$exists_in_world_$i'(W0,S2) => (do(W0,S,A,S2) => in(W0,I,B,S2))))))))))))))))))).
tff(con, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [I:$i,B:$i,A:$i,S:$i]: ((((('$exists_in_world_$i'(W,I) & '$exists_in_world_$i'(W,B)) & '$exists_in_world_$i'(W,A)) & '$exists_in_world_$i'(W,S)) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (userid(W0,u,I) & (entry_box(W0,B) & number(W0,B,one)))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [S2:$i]: (('$exists_in_world_$i'(W0,S2) => (do(W0,S,A,S2) => in(W0,I,B,S2)))))))))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:04 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(ann_decl, type, ann: $i).
tff(mary_decl, type, mary: $i).
tff(bob_decl, type, bob: $i).
tff(john_decl, type, john: $i).
tff(paul_decl, type, paul: $i).
tff(jane_decl, type, jane: $i).
tff(parent_decl, type, parent: (('$world' * $i * $i) > $o)).
tff(q2_decl, type, q2: (('$world' * $i) > $o)).
tff(female_decl, type, female: (('$world' * $i) > $o)).
tff(male_decl, type, male: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_ann_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,ann)))).
tff('$exists_in_world_mary_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,mary)))).
tff('$exists_in_world_paul_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,paul)))).
tff('$exists_in_world_bob_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,bob)))).
tff('$exists_in_world_jane_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,jane)))).
tff('$exists_in_world_john_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,john)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(abox, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (female(W,mary) & (female(W,ann) & (female(W,jane) & (male(W,bob) & (male(W,john) & (male(W,paul) & (parent(W,bob,mary) & (parent(W,bob,ann) & (parent(W,john,paul) & parent(W,mary,jane)))))))))))))).
tff(tbox, axiom, (! [X:$i]: (('$exists_in_world_$i'('$local_world',X) => ((! [W:'$world']: (('$accessible_world'('$local_world',W) => male(W,X)))) => (! [W:'$world']: (('$accessible_world'('$local_world',W) => ~ (female(W,X)))))))))).
tff(query, axiom, (! [X:$i]: (('$exists_in_world_$i'('$local_world',X) => (q2('$local_world',X) <=> ((! [W:'$world']: (('$accessible_world'('$local_world',W) => male(W,X)))) & ~ ((! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [Y:$i]: (('$exists_in_world_$i'(W,Y) & (parent(W,X,Y) & female(W,Y))))))))))))))).
tff(con, conjecture, (q2('$local_world',john) & q2('$local_world',paul))).

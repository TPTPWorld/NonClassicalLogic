%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:08 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(sorti2_decl, type, sorti2: (('$world' * $i) > $o)).
tff(sorti1_decl, type, sorti1: (('$world' * $i) > $o)).
tff(op2_decl, type, op2: (($i * $i) > $i)).
tff(op1_decl, type, op1: (($i * $i) > $i)).
tff(h_decl, type, h: ($i > $i)).
tff(j_decl, type, j: ($i > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_op2_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,op2(X0,X1))))))).
tff('$exists_in_world_op1_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,op1(X0,X1))))))).
tff('$exists_in_world_h_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,h(X0)))))).
tff('$exists_in_world_j_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,j(X0)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => qmltpeq(W0,X,X))))))))))).
tff(symmetry, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,X,Y)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,Y,X))))))))))))))))))))).
tff(transitivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Z:$i]: (('$exists_in_world_$i'(W1,Z) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Y)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,Y,Z))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Z))))))))))))))))))))))))))).
tff(h_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,h(A),h(B)))))))))))))))))))))).
tff(j_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,j(A),j(B)))))))))))))))))))))).
tff(op1_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,op1(A,C),op1(B,C)))))))))))))))))))))))))))).
tff(op1_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,op1(C,A),op1(C,B)))))))))))))))))))))))))))).
tff(op2_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,op2(A,C),op2(B,C)))))))))))))))))))))))))))).
tff(op2_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,op2(C,A),op2(C,B)))))))))))))))))))))))))))).
tff(sorti1_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti1(W2,A))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti1(W2,B))))))))))))))))))))).
tff(sorti2_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti2(W2,A))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti2(W2,B))))))))))))))))))))).
tff(ax1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [U:$i]: (('$exists_in_world_$i'(W,U) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => sorti1(W1,U)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [V:$i]: (('$exists_in_world_$i'(W1,V) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti1(W3,V)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti1(W3,op1(U,V)))))))))))))))))))))))))).
tff(ax2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [U:$i]: (('$exists_in_world_$i'(W,U) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => sorti2(W1,U)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [V:$i]: (('$exists_in_world_$i'(W1,V) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti2(W3,V)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti2(W3,op2(U,V)))))))))))))))))))))))))).
tff(ax3, axiom, (? [U:$i]: (('$exists_in_world_$i'('$local_world',U) & ((! [W:'$world']: (('$accessible_world'('$local_world',W) => sorti1(W,U)))) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [V:$i]: (('$exists_in_world_$i'(W,V) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => sorti1(W1,V)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,op1(V,V),U))))))))))))))))))).
tff(ax4, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ~ ((? [U:$i]: (('$exists_in_world_$i'(W,U) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => sorti2(W0,U)))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: (('$exists_in_world_$i'(W0,V) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti2(W2,V)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,op2(V,V),U))))))))))))))))))))))).
tff(co1, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [U:$i]: (('$exists_in_world_$i'(W0,U) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti1(W2,U)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti2(W2,h(U))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: (('$exists_in_world_$i'(W0,V) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti2(W2,V)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => sorti1(W2,j(V)))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ~ (((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [W:$i]: (('$exists_in_world_$i'(W1,W) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti1(W3,W)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [X:$i]: (('$exists_in_world_$i'(W3,X) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => sorti1(W5,X)))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,h(op1(W,X)),op2(h(W),h(X)))))))))))))))))))))))))) & ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Y:$i]: (('$exists_in_world_$i'(W1,Y) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti2(W3,Y)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [Z:$i]: (('$exists_in_world_$i'(W3,Z) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => sorti2(W5,Z)))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,j(op2(Y,Z)),op1(j(Y),j(Z)))))))))))))))))))))))))) & ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [X1:$i]: (('$exists_in_world_$i'(W1,X1) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti2(W3,X1)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,h(j(X1)),X1)))))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [X2:$i]: (('$exists_in_world_$i'(W1,X2) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => sorti1(W3,X2)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,j(h(X2)),X2)))))))))))))))))))))))))).

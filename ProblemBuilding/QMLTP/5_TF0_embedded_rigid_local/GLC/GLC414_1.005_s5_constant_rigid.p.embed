%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:10 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(a_truth_decl, type, a_truth: (('$world' * $i) > $o)).
tff(not_decl, type, not: ($i > $i)).
tff(implies_decl, type, implies: (($i * $i) > $i)).
tff(thm147, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ~ (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [P:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Q:$i]: (((! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => a_truth(W3,implies(P,Q))))))))) | ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => a_truth(W3,P)))))))) | (! [W2:'$world']: (('$accessible_world'(W1,W2) => a_truth(W2,Q)))))))))))))))) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [P:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Q:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => a_truth(W2,implies(P,implies(Q,P)))))))))))))))) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [P:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Q:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [R:$i]: ((! [W3:'$world']: (('$accessible_world'(W2,W3) => a_truth(W3,implies(implies(P,implies(Q,R)),implies(implies(P,Q),implies(P,R)))))))))))))))))))))) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [P:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Q:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => a_truth(W2,implies(implies(not(P),not(Q)),implies(Q,P)))))))))))))))) & (? [A:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => ~ ((! [W1:'$world']: (('$accessible_world'(W0,W1) => a_truth(W1,implies(A,A)))))))))))))))))))).

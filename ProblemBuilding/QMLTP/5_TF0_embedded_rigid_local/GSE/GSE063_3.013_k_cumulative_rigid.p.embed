%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:35 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(empty_set_decl, type, empty_set: $i).
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
tff(empty_decl, type, empty: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_empty_set_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,empty_set)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => qmltpeq(W0,X,X))))))))))).
tff(symmetry, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,X,Y)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,Y,X))))))))))))))))))))).
tff(transitivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Z:$i]: (('$exists_in_world_$i'(W1,Z) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Y)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,Y,Z))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Z))))))))))))))))))))))))))).
tff(empty_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => empty(W2,A))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => empty(W2,B))))))))))))))))))))).
tff(member_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,B,C))))))))))))))))))))))))))).
tff(member_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,B))))))))))))))))))))))))))).
tff(subset_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,B,C))))))))))))))))))))))))))).
tff(subset_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,C,B))))))))))))))))))))))))))).
tff(empty_set_subset, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => subset(W0,empty_set,B))))))))))).
tff(empty_set_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ~ ((! [W1:'$world']: (('$accessible_world'(W0,W1) => member(W1,B,empty_set))))))))))))))).
tff(subset_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))))))))))))))))))))).
tff(equal_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,C,B))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,C,B))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))))))))))))))))))))).
tff(reflexivity_of_subset, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => subset(W0,B,B))))))))))).
tff(empty_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => empty(W1,B)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,B)))))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,B)))))))))))))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => empty(W1,B)))))))))))))))).
tff(prove_subset_of_empty_set_is_empty_set, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => subset(W1,B,empty_set)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,B,empty_set))))))))))))))).

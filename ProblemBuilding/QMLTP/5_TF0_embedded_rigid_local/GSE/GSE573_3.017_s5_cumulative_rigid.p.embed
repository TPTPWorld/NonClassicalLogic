%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:36 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(intersect_decl, type, intersect: (('$world' * $i * $i) > $o)).
tff(disjoint_decl, type, disjoint: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_const', axiom, (! [W:'$world',X:$i]: ('$exists_in_world_$i'(W,X)))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(intersect_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => intersect(W2,B,C)))) => (? [D:$i]: (('$exists_in_world_$i'(W1,D) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => member(W2,D,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => member(W2,D,C)))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((? [D:$i]: (('$exists_in_world_$i'(W1,D) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => member(W2,D,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => member(W2,D,C)))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => intersect(W2,B,C)))))))))))))))))))))).
tff(disjoint_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,B,C)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => intersect(W3,B,C)))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => intersect(W3,B,C)))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,B,C)))))))))))))))))))))).
tff(symmetry_of_intersect, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => intersect(W2,B,C)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => intersect(W2,C,B))))))))))))))))))))).
tff(prove_th12, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [D:$i]: (('$exists_in_world_$i'(W1,D) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,B,C)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,C,D))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ~ ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,B,D))))))))))))))))))))))))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:38 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
tff(difference_decl, type, difference: (($i * $i) > $i)).
tff(symmetric_difference_decl, type, symmetric_difference: (($i * $i) > $i)).
tff(union_decl, type, union: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_difference_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,difference(X0,X1))))))).
tff('$exists_in_world_symmetric_difference_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,symmetric_difference(X0,X1))))))).
tff('$exists_in_world_union_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,union(X0,X1))))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => qmltpeq(W0,X,X))))))))))).
tff(symmetry, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,X,Y)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,Y,X))))))))))))))))))))).
tff(transitivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Z:$i]: (('$exists_in_world_$i'(W1,Z) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Y)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,Y,Z))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Z))))))))))))))))))))))))))).
tff(difference_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,difference(A,C),difference(B,C)))))))))))))))))))))))))))).
tff(difference_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,difference(C,A),difference(C,B)))))))))))))))))))))))))))).
tff(symmetric_difference_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,symmetric_difference(A,C),symmetric_difference(B,C)))))))))))))))))))))))))))).
tff(symmetric_difference_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,symmetric_difference(C,A),symmetric_difference(C,B)))))))))))))))))))))))))))).
tff(union_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,union(A,C),union(B,C)))))))))))))))))))))))))))).
tff(union_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,union(C,A),union(C,B)))))))))))))))))))))))))))).
tff(member_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,B,C))))))))))))))))))))))))))).
tff(member_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,C,B))))))))))))))))))))))))))).
tff(subset_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,B,C))))))))))))))))))))))))))).
tff(subset_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => subset(W3,C,B))))))))))))))))))))))))))).
tff(member_equal, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B))))))))))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C))))))))))))))))))))).
tff(union_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [D:$i]: (('$exists_in_world_$i'(W1,D) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,union(B,C))))) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,B)))) | (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,C))))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,B)))) | (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,union(B,C))))))))))))))))))))))))))))).
tff(difference_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [D:$i]: (('$exists_in_world_$i'(W1,D) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,difference(B,C))))) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ~ ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C))))))))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ~ ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C))))))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => member(W3,D,difference(B,C))))))))))))))))))))))))))))).
tff(symmetric_difference_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,symmetric_difference(B,C),union(difference(B,C),difference(C,B))))))))))))))))))).
tff(equal_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,C,B))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,C,B))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))))))))))))))))))))).
tff(commutativity_of_union, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,union(B,C),union(C,B)))))))))))))))))).
tff(commutativity_of_symmetric_difference, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,symmetric_difference(B,C),symmetric_difference(C,B)))))))))))))))))).
tff(equal_member_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B))))))))))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B))))))))))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,B,C)))))))))))))))))))))).
tff(subset_defn, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))))))))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [D:$i]: (('$exists_in_world_$i'(W2,D) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,B)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => member(W4,D,C)))))))))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => subset(W2,B,C)))))))))))))))))))))).
tff(reflexivity_of_subset, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => subset(W0,B,B))))))))))).
tff(prove_th25, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [C:$i]: (('$exists_in_world_$i'(W0,C) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [D:$i]: (('$exists_in_world_$i'(W1,D) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [E:$i]: (('$exists_in_world_$i'(W3,E) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => ~ ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,B)))))))) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,C)))) => (! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,D)))))))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,D)))) => (! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,C))))))))))))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => (((! [W5:'$world']: (('$accessible_world'(W4,W5) => ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,C)))) => (! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,D)))))))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,D)))) => (! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,C))))))))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => ~ ((! [W6:'$world']: (('$accessible_world'(W5,W6) => member(W6,E,B))))))))))))))))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,B,symmetric_difference(C,D)))))))))))))))))))))))))))).

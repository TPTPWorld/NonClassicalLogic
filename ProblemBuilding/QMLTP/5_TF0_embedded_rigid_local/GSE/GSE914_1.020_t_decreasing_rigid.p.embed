%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:41 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(empty_set_decl, type, empty_set: $i).
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(in_decl, type, in: (('$world' * $i * $i) > $o)).
tff(disjoint_decl, type, disjoint: (('$world' * $i * $i) > $o)).
tff(empty_decl, type, empty: (('$world' * $i) > $o)).
tff(set_intersection2_decl, type, set_intersection2: (($i * $i) > $i)).
tff(unordered_pair_decl, type, unordered_pair: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_empty_set_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,empty_set)))).
tff('$exists_in_world_set_intersection2_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,set_intersection2(X0,X1))))))).
tff('$exists_in_world_unordered_pair_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,unordered_pair(X0,X1))))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => qmltpeq(W0,X,X))))))))))).
tff(symmetry, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,X,Y)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,Y,X))))))))))))))))))))).
tff(transitivity, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Z:$i]: (('$exists_in_world_$i'(W1,Z) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Y)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,Y,Z))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,X,Z))))))))))))))))))))))))))).
tff(set_intersection2_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,set_intersection2(A,C),set_intersection2(B,C)))))))))))))))))))))))))))).
tff(set_intersection2_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,set_intersection2(C,A),set_intersection2(C,B)))))))))))))))))))))))))))).
tff(unordered_pair_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,unordered_pair(A,C),unordered_pair(B,C)))))))))))))))))))))))))))).
tff(unordered_pair_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,unordered_pair(C,A),unordered_pair(C,B)))))))))))))))))))))))))))).
tff(disjoint_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,B,C))))))))))))))))))))))))))).
tff(disjoint_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,C,B))))))))))))))))))))))))))).
tff(empty_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,A,B)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => empty(W2,A))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => empty(W2,B))))))))))))))))))))).
tff(in_substitution_1, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,A,C))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,B,C))))))))))))))))))))))))))).
tff(in_substitution_2, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,A,B)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,C,A))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,C,B))))))))))))))))))))))))))).
tff(antisymmetry_r2_hidden, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => in(W2,A,B)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,B,A))))))))))))))))))))))))).
tff(commutativity_k2_tarski, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,unordered_pair(A,B),unordered_pair(B,A)))))))))))))))))).
tff(commutativity_k3_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,set_intersection2(A,B),set_intersection2(B,A)))))))))))))))))).
tff(d1_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,A,empty_set)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [B:$i]: (('$exists_in_world_$i'(W1,B) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,B,A)))))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [B:$i]: (('$exists_in_world_$i'(W1,B) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,B,A)))))))))))))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,A,empty_set)))))))))))))))).
tff(d2_tarski, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,C,unordered_pair(A,B))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [D:$i]: (('$exists_in_world_$i'(W3,D) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C)))) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,A)))) | (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,B))))))))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => (((! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,A)))) | (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,B))))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C))))))))))))))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [D:$i]: (('$exists_in_world_$i'(W3,D) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C)))) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,A)))) | (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,B))))))))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => (((! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,A)))) | (! [W5:'$world']: (('$accessible_world'(W4,W5) => qmltpeq(W5,D,B))))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C))))))))))))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,C,unordered_pair(A,B))))))))))))))))))))))))))))).
tff(d3_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,C,set_intersection2(A,B))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [D:$i]: (('$exists_in_world_$i'(W3,D) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C)))) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,A)))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,B))))))))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => (((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,A)))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,B))))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C))))))))))))))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [D:$i]: (('$exists_in_world_$i'(W3,D) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C)))) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,A)))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,B))))))))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => (((! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,A)))) & (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,B))))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => in(W5,D,C))))))))))))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => qmltpeq(W3,C,set_intersection2(A,B))))))))))))))))))))))))))))).
tff(d7_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,A,B)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,set_intersection2(A,B),empty_set)))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => qmltpeq(W2,set_intersection2(A,B),empty_set)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,A,B)))))))))))))))))))))).
tff(fc1_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => empty(W,empty_set))))).
tff(idempotence_k3_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => qmltpeq(W1,set_intersection2(A,A),A))))))))))))))))).
tff(rc1_xboole_0, axiom, (? [A:$i]: (('$exists_in_world_$i'('$local_world',A) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => empty(W,A)))))))).
tff(rc2_xboole_0, axiom, (? [A:$i]: (('$exists_in_world_$i'('$local_world',A) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => ~ ((! [W0:'$world']: (('$accessible_world'(W,W0) => empty(W0,A)))))))))))).
tff(symmetry_r1_xboole_0, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,A,B)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => disjoint(W2,B,A))))))))))))))))))))).
tff(t55_zfmisc_1, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [B:$i]: (('$exists_in_world_$i'(W0,B) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [C:$i]: (('$exists_in_world_$i'(W1,C) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ (((! [W3:'$world']: (('$accessible_world'(W2,W3) => disjoint(W3,unordered_pair(A,B),C)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => in(W3,A,C)))))))))))))))))))))))))))).

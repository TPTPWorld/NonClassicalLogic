%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:04:43 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(bt_decl, type, bt: $i).
tff(an_a_nonce_decl, type, an_a_nonce: $i).
tff(a_decl, type, a: $i).
tff(b_decl, type, b: $i).
tff(at_decl, type, at: $i).
tff(t_decl, type, t: $i).
tff(a_holds_decl, type, a_holds: (('$world' * $i) > $o)).
tff(t_holds_decl, type, t_holds: (('$world' * $i) > $o)).
tff(party_of_protocol_decl, type, party_of_protocol: (('$world' * $i) > $o)).
tff(a_stored_decl, type, a_stored: (('$world' * $i) > $o)).
tff(fresh_to_b_decl, type, fresh_to_b: (('$world' * $i) > $o)).
tff(b_stored_decl, type, b_stored: (('$world' * $i) > $o)).
tff(b_holds_decl, type, b_holds: (('$world' * $i) > $o)).
tff(message_decl, type, message: (('$world' * $i) > $o)).
tff(generate_b_nonce_decl, type, generate_b_nonce: ($i > $i)).
tff(quadruple_decl, type, quadruple: (($i * $i * $i * $i) > $i)).
tff(triple_decl, type, triple: (($i * $i * $i) > $i)).
tff(encrypt_decl, type, encrypt: (($i * $i) > $i)).
tff(generate_key_decl, type, generate_key: ($i > $i)).
tff(generate_expiration_time_decl, type, generate_expiration_time: ($i > $i)).
tff(sent_decl, type, sent: (($i * $i * $i) > $i)).
tff(key_decl, type, key: (($i * $i) > $i)).
tff(pair_decl, type, pair: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(a_holds_key_at_for_t, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => a_holds(W,key(at,t)))))).
tff(a_is_party_of_protocol, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => party_of_protocol(W,a))))).
tff(a_sent_message_i_to_b, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => message(W,sent(a,b,pair(a,an_a_nonce))))))).
tff(a_stored_message_i, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => a_stored(W,pair(b,an_a_nonce)))))).
tff(a_forwards_secure, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [U:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [W:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [X:$i]: ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [Y:$i]: ((! [W4:'$world']: (('$accessible_world'(W3,W4) => (! [Z:$i]: ((! [W5:'$world']: (('$accessible_world'(W4,W5) => (((! [W6:'$world']: (('$accessible_world'(W5,W6) => message(W6,sent(t,a,triple(encrypt(quadruple(Y,Z,W,V),at),X,U)))))) & (! [W6:'$world']: (('$accessible_world'(W5,W6) => a_stored(W6,pair(Y,Z)))))) => ((! [W6:'$world']: (('$accessible_world'(W5,W6) => message(W6,sent(a,Y,pair(X,encrypt(U,W))))))) & (! [W6:'$world']: (('$accessible_world'(W5,W6) => a_holds(W6,key(W,Y))))))))))))))))))))))))))))))))))))))))).
tff(b_hold_key_bt_for_t, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => b_holds(W,key(bt,t)))))).
tff(b_is_party_of_protocol, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => party_of_protocol(W,b))))).
tff(nonce_a_is_fresh_to_b, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => fresh_to_b(W,an_a_nonce))))).
tff(b_creates_freash_nonces_in_time, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [U:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (((! [W2:'$world']: (('$accessible_world'(W1,W2) => message(W2,sent(U,b,pair(U,V)))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => fresh_to_b(W2,V))))) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => message(W2,sent(b,t,triple(b,generate_b_nonce(V),encrypt(triple(U,V,generate_expiration_time(V)),bt))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => b_stored(W2,pair(U,V))))))))))))))))))))).
tff(b_accepts_secure_session_key, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [V:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Y:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => message(W3,sent(X,b,pair(encrypt(triple(X,V,generate_expiration_time(Y)),bt),encrypt(generate_b_nonce(Y),V))))))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => b_stored(W3,pair(X,Y)))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => b_holds(W3,key(V,X))))))))))))))))))))))))).
tff(t_holds_key_at_for_a, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => t_holds(W,key(at,a)))))).
tff(t_holds_key_bt_for_b, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => t_holds(W,key(bt,b)))))).
tff(t_is_party_of_protocol, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => party_of_protocol(W,t))))).
tff(server_t_generates_key, axiom, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [U:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [W:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [X:$i]: ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [Y:$i]: ((! [W4:'$world']: (('$accessible_world'(W3,W4) => (! [Z:$i]: ((! [W5:'$world']: (('$accessible_world'(W4,W5) => (! [X1:$i]: ((! [W6:'$world']: (('$accessible_world'(W5,W6) => (((! [W7:'$world']: (('$accessible_world'(W6,W7) => message(W7,sent(U,t,triple(U,V,encrypt(triple(W,X,Y),Z))))))) & ((! [W7:'$world']: (('$accessible_world'(W6,W7) => t_holds(W7,key(Z,U))))) & (! [W7:'$world']: (('$accessible_world'(W6,W7) => t_holds(W7,key(X1,W))))))) => (! [W7:'$world']: (('$accessible_world'(W6,W7) => message(W7,sent(t,W,triple(encrypt(quadruple(U,X,generate_key(X),Y),X1),encrypt(triple(W,generate_key(X),Y),Z),V)))))))))))))))))))))))))))))))))))))))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:22 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(big_s_decl, type, big_s: (('$world' * $i) > $o)).
tff(big_q_decl, type, big_q: (('$world' * $i) > $o)).
tff(big_r_decl, type, big_r: (('$world' * $i) > $o)).
tff(big_p_decl, type, big_p: (('$world' * $i) > $o)).
tff(pel20, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Y:$i]: ((? [Z:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [W:$i]: ((! [W3:'$world']: (('$accessible_world'(W2,W3) => (((! [W4:'$world']: (('$accessible_world'(W3,W4) => big_p(W4,X)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => big_q(W4,Y))))) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => big_r(W4,Z)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => big_s(W4,W)))))))))))))))))))))))))) => (? [X1:$i,Y1:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => (((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,X1)))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_q(W1,Y1))))) => (? [Z1:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_r(W1,Z1))))))))))))))))).

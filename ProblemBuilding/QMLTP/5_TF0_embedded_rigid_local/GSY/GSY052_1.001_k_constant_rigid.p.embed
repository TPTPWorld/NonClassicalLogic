%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:23 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(p_decl, type, p: ('$world' > $o)).
tff(big_f_decl, type, big_f: (('$world' * $i) > $o)).
tff(pel22, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => p(W2)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_f(W2,X)))))))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_f(W2,X)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => p(W2)))))))))))))) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => p(W1)))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [X1:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_f(W2,X1))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [X1:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_f(W2,X1))))))))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => p(W1)))))))))))))).

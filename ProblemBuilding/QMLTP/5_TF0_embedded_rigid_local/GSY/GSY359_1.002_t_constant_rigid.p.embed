%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:23 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(big_q_decl, type, big_q: (('$world' * $i * $i) > $o)).
tff(big_r_decl, type, big_r: (('$world' * $i) > $o)).
tff(x2110, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((? [X:$i]: ((! [W0:'$world']: (('$accessible_world'(W,W0) => big_r(W0,X)))))) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_r(W2,Y)))) => (? [Z:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_q(W2,Y,Z))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [Y:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => big_q(W3,X,Y)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => big_q(W3,X,X)))))))))))))))))))) => (? [X:$i,Y:$i]: (((! [W0:'$world']: (('$accessible_world'(W,W0) => big_q(W0,X,Y)))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => big_r(W0,Y)))))))))))).

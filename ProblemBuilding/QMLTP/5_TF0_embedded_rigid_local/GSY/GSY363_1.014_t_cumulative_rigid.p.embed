%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:24 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(a_decl, type, a: $i).
tff(b_decl, type, b: $i).
tff(big_r_decl, type, big_r: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_a_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,a)))).
tff('$exists_in_world_b_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,b)))).
tff(x2114, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_r(W1,X,b)))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Y:$i]: (('$exists_in_world_$i'(W0,Y) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((? [Z:$i]: (('$exists_in_world_$i'(W1,Z) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_r(W2,Y,Z))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_r(W2,a,Y))))))))))))))) => (? [U:$i]: (('$exists_in_world_$i'(W,U) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [V:$i]: (('$exists_in_world_$i'(W0,V) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_r(W1,U,V)))))))))))))))))).

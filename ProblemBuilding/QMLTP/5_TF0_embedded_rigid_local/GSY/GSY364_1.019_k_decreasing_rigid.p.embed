%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:24 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(big_q_decl, type, big_q: (('$world' * $i) > $o)).
tff(big_p_decl, type, big_p: (('$world' * $i * $i) > $o)).
tff(big_m_decl, type, big_m: (('$world' * $i) > $o)).
tff(f_decl, type, f: (($i * $i) > $i)).
tff(g_decl, type, g: ($i > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_f_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,f(X0,X1))))))).
tff('$exists_in_world_g_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,g(X0)))))).
tff(x2115, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((? [Y:$i]: (('$exists_in_world_$i'(W1,Y) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,X,Y))))))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [Z:$i]: (('$exists_in_world_$i'(W2,Z) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => big_p(W3,Z,Z)))))))))))))))))))) & ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [U:$i]: (('$exists_in_world_$i'(W0,U) => (? [V:$i]: (('$exists_in_world_$i'(W0,V) & ((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,U,V)))) | ((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_m(W1,U)))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_q(W1,f(U,V)))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [W:$i]: (('$exists_in_world_$i'(W0,W) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_q(W2,W)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ~ ((! [W3:'$world']: (('$accessible_world'(W2,W3) => big_m(W3,g(W))))))))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [U:$i]: (('$exists_in_world_$i'(W0,U) => (? [V:$i]: (('$exists_in_world_$i'(W0,V) & ((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,g(U),V)))) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,U,U))))))))))))))))))).

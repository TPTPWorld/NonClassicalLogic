%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:24 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
tff(mrel_transitive, axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'(W,V) & '$accessible_world'(V,U)) => '$accessible_world'(W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(big_r_decl, type, big_r: (('$world' * $i * $i) > $o)).
tff(big_p_decl, type, big_p: (('$world' * $i) > $o)).
tff(g_decl, type, g: ($i > $i)).
tff(h_decl, type, h: ($i > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_g_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,g(X0)))))).
tff('$exists_in_world_h_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,h(X0)))))).
tff(x2116, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (? [Y:$i]: (('$exists_in_world_$i'(W0,Y) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,X)))) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_r(W2,X,g(h(Y)))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,Y)))))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [W:$i]: (('$exists_in_world_$i'(W0,W) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,W)))) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,g(W))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,h(W))))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,X)))) => (? [Y:$i]: (('$exists_in_world_$i'(W1,Y) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => big_r(W2,X,Y)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => big_p(W2,Y))))))))))))))))))))))).

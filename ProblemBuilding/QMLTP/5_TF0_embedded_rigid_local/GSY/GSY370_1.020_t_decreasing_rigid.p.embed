%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:25 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(a_decl, type, a: $i).
tff(big_p_decl, type, big_p: (('$world' * $i * $i * $i) > $o)).
tff(f_decl, type, f: ($i > $i)).
tff(h_decl, type, h: ($i > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_a_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,a)))).
tff('$exists_in_world_f_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,f(X0)))))).
tff('$exists_in_world_h_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,h(X0)))))).
tff(x2121, conjecture, (? [V:$i]: (('$exists_in_world_$i'('$local_world',V) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [Y:$i]: (('$exists_in_world_$i'(W,Y) => (? [Z:$i]: (('$exists_in_world_$i'(W,Z) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (((! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,a,Y,h(Y))))) | (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,V,Y,f(Y)))))) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_p(W1,V,Y,Z))))))))))))))))))))).

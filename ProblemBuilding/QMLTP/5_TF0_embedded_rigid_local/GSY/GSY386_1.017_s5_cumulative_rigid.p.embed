%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:27 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(big_f_decl, type, big_f: (('$world' * $i * $i) > $o)).
tff(big_s_decl, type, big_s: (('$world' * $i * $i) > $o)).
tff(big_d_decl, type, big_d: (('$world' * $i * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_const', axiom, (! [W:'$world',X:$i]: ('$exists_in_world_$i'(W,X)))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff(x2138, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => (((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (? [Y:$i]: (('$exists_in_world_$i'(W0,Y) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => big_f(W1,X,Y))))))))))))) & ((? [X:$i]: (('$exists_in_world_$i'(W,X) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [E:$i]: (('$exists_in_world_$i'(W0,E) => (? [N:$i]: (('$exists_in_world_$i'(W0,N) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [W:$i]: (('$exists_in_world_$i'(W1,W) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => big_s(W3,N,W)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => big_d(W3,W,X,E)))))))))))))))))))))))))) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [E:$i]: (('$exists_in_world_$i'(W0,E) => (? [D:$i]: (('$exists_in_world_$i'(W0,D) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [A:$i]: (('$exists_in_world_$i'(W1,A) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [B:$i]: (('$exists_in_world_$i'(W2,B) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => big_d(W4,A,B,D)))) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => (! [Y:$i]: (('$exists_in_world_$i'(W4,Y) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => (! [Z:$i]: (('$exists_in_world_$i'(W5,Z) => (! [W6:'$world']: (('$accessible_world'(W5,W6) => (((! [W7:'$world']: (('$accessible_world'(W6,W7) => big_f(W7,A,Y)))) & (! [W7:'$world']: (('$accessible_world'(W6,W7) => big_f(W7,B,Z))))) => (! [W7:'$world']: (('$accessible_world'(W6,W7) => big_d(W7,Y,Z,E))))))))))))))))))))))))))))))))))))))))))))))) => (? [Y:$i]: (('$exists_in_world_$i'(W,Y) & (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [E:$i]: (('$exists_in_world_$i'(W0,E) => (? [M:$i]: (('$exists_in_world_$i'(W0,M) & (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [W:$i]: (('$exists_in_world_$i'(W1,W) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => big_s(W3,M,W)))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (! [Z:$i]: (('$exists_in_world_$i'(W3,Z) => (! [W4:'$world']: (('$accessible_world'(W3,W4) => ((! [W5:'$world']: (('$accessible_world'(W4,W5) => big_f(W5,W,Z)))) => (! [W5:'$world']: (('$accessible_world'(W4,W5) => big_d(W5,Z,Y,E))))))))))))))))))))))))))))))))))))))))).

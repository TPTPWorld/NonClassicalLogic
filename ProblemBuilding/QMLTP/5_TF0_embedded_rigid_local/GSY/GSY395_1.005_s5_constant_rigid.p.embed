%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:28 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(f_decl, type, f: (('$world' * $i) > $o)).
tff(g_decl, type, g: (('$world' * $i) > $o)).
tff(kalish202, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => ((! [W2:'$world']: (('$accessible_world'(W1,W2) => f(W2,X)))) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => g(W2,X))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ((? [Y:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => f(W1,Y)))))) => (? [Z:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => g(W1,Z))))))))))))))).

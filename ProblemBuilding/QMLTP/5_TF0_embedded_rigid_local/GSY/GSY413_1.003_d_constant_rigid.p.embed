%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:31 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(d_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_D),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_serial, axiom, (! [W:'$world']: ((? [V:'$world']: ('$accessible_world'(W,V)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(f_decl, type, f: (('$world' * $i * $i) > $o)).
tff(kalish256, conjecture, (! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [Z:$i]: ((? [Y:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [X:$i]: (((! [W2:'$world']: (('$accessible_world'(W1,W2) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => f(W3,X,Y)))) => ((! [W3:'$world']: (('$accessible_world'(W2,W3) => f(W3,X,Z)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ~ ((! [W4:'$world']: (('$accessible_world'(W3,W4) => f(W4,X,X))))))))))))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => (((! [W3:'$world']: (('$accessible_world'(W2,W3) => f(W3,X,Z)))) & (! [W3:'$world']: (('$accessible_world'(W2,W3) => ~ ((! [W4:'$world']: (('$accessible_world'(W3,W4) => f(W4,X,X))))))))) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => f(W3,X,Y))))))))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => ~ ((? [V:$i]: ((! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [U:$i]: ((! [W2:'$world']: (('$accessible_world'(W1,W2) => f(W2,U,V)))))))))))))))))))).

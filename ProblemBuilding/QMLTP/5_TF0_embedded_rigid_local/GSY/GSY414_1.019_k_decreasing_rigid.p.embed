%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:31 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(f_decl, type, f: (('$world' * $i) > $o)).
tff(g_decl, type, g: (('$world' * $i) > $o)).
tff(h_decl, type, h: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff(kalish265, conjecture, ((! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((? [Y:$i]: (('$exists_in_world_$i'(W1,Y) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => h(W2,X,Y)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => f(W2,Y)))))))) => (? [Z:$i]: (('$exists_in_world_$i'(W1,Z) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => h(W2,X,Z)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => g(W2,Z)))))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [U:$i]: (('$exists_in_world_$i'(W0,U) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [V:$i]: (('$exists_in_world_$i'(W1,V) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [W:$i]: (('$exists_in_world_$i'(W2,W) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (((! [W4:'$world']: (('$accessible_world'(W3,W4) => h(W4,U,V)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => f(W4,V))))) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => h(W4,U,W)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => g(W4,W))))))))))))))))))))))))))))))) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => ((! [W0:'$world']: (('$accessible_world'(W,W0) => (! [U:$i]: (('$exists_in_world_$i'(W0,U) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => (! [V:$i]: (('$exists_in_world_$i'(W1,V) => (! [W2:'$world']: (('$accessible_world'(W1,W2) => (! [W:$i]: (('$exists_in_world_$i'(W2,W) => (! [W3:'$world']: (('$accessible_world'(W2,W3) => (((! [W4:'$world']: (('$accessible_world'(W3,W4) => h(W4,U,V)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => f(W4,V))))) => ((! [W4:'$world']: (('$accessible_world'(W3,W4) => h(W4,U,W)))) & (! [W4:'$world']: (('$accessible_world'(W3,W4) => g(W4,W))))))))))))))))))))))))))) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (! [X:$i]: (('$exists_in_world_$i'(W0,X) => (! [W1:'$world']: (('$accessible_world'(W0,W1) => ((? [Y:$i]: (('$exists_in_world_$i'(W1,Y) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => h(W2,X,Y)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => f(W2,Y)))))))) => (? [Z:$i]: (('$exists_in_world_$i'(W1,Z) & ((! [W2:'$world']: (('$accessible_world'(W1,W2) => h(W2,X,Z)))) & (! [W2:'$world']: (('$accessible_world'(W1,W2) => g(W2,Z)))))))))))))))))))))))).

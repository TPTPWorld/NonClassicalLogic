%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(always)_decl', type, '#idx(always)': '$index').
tff('#idx(load)_decl', type, '#idx(load)': '$index').
tff('#idx(shoot)_decl', type, '#idx(shoot)': '$index').
tff('mrel_reflexive_#idx(always)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(always)',W,W)))).
tff('mrel_transitive_#idx(always)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(always)',W,V) & '$accessible_world'('#idx(always)',V,U)) => '$accessible_world'('#idx(always)',W,U))))).
tff('mrel_reflexive_#idx(load)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(load)',W,W)))).
tff('mrel_transitive_#idx(load)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(load)',W,V) & '$accessible_world'('#idx(load)',V,U)) => '$accessible_world'('#idx(load)',W,U))))).
tff('mrel_reflexive_#idx(shoot)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(shoot)',W,W)))).
tff('mrel_transitive_#idx(shoot)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(shoot)',W,V) & '$accessible_world'('#idx(shoot)',V,U)) => '$accessible_world'('#idx(shoot)',W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(alive_decl, type, alive: ('$world' > $o)).
tff(loaded_decl, type, loaded: ('$world' > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(i_always_load_1, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => loaded(W)))) => (! [W:'$world']: (('$accessible_world'('#idx(load)','$local_world',W) => loaded(W)))))).
tff(i_always_load_2, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => ~ (loaded(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(load)','$local_world',W) => ~ (loaded(W))))))).
tff(i_always_alive_1, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => alive(W)))) => (! [W:'$world']: (('$accessible_world'('#idx(load)','$local_world',W) => alive(W)))))).
tff(i_always_alive_2, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => ~ (alive(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(load)','$local_world',W) => ~ (alive(W))))))).
tff(i_always_load_1_0, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => loaded(W)))) => (! [W:'$world']: (('$accessible_world'('#idx(shoot)','$local_world',W) => loaded(W)))))).
tff(i_always_load_2_0, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => ~ (loaded(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(shoot)','$local_world',W) => ~ (loaded(W))))))).
tff(i_always_alive_1_0, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => alive(W)))) => (! [W:'$world']: (('$accessible_world'('#idx(shoot)','$local_world',W) => alive(W)))))).
tff(i_always_alive_2_0, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => ~ (alive(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(shoot)','$local_world',W) => ~ (alive(W))))))).
tff(axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(load)',W,W0) => loaded(W0)))))))).
tff(axiom_2, axiom, (! [W:'$world']: (('$accessible_world'('#idx(always)','$local_world',W) => (loaded(W) => (! [W0:'$world']: (('$accessible_world'('#idx(shoot)',W,W0) => ~ (alive(W0)))))))))).
tff(conj, conjecture, (! [W:'$world']: (('$accessible_world'('#idx(load)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(shoot)',W,W0) => ~ (alive(W0))))))))).

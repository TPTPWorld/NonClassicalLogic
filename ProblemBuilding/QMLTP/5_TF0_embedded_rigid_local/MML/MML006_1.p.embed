%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(make_c)_decl', type, '#idx(make_c)': '$index').
tff('#idx(pour_b)_decl', type, '#idx(pour_b)': '$index').
tff('#idx(pour_a)_decl', type, '#idx(pour_a)': '$index').
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(acid_decl, type, acid: ('$world' > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(pour_ab_make_axiom_1, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(pour_a)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(pour_b)',W,W0) => acid(W0))))))) => (! [W:'$world']: (('$accessible_world'('#idx(make_c)','$local_world',W) => acid(W)))))).
tff(pour_ab_make_axiom_2, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(pour_a)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(pour_b)',W,W0) => ~ (acid(W0)))))))) => (! [W:'$world']: (('$accessible_world'('#idx(make_c)','$local_world',W) => ~ (acid(W))))))).
tff(pour_ba_make_axiom_1, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(pour_b)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(pour_a)',W,W0) => acid(W0))))))) => (! [W:'$world']: (('$accessible_world'('#idx(make_c)','$local_world',W) => acid(W)))))).
tff(pour_ba_make_axiom_2, axiom, ((! [W:'$world']: (('$accessible_world'('#idx(pour_b)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(pour_a)',W,W0) => ~ (acid(W0)))))))) => (! [W:'$world']: (('$accessible_world'('#idx(make_c)','$local_world',W) => ~ (acid(W))))))).
tff(pour_a_acid, axiom, (! [W:'$world']: (('$accessible_world'('#idx(pour_a)','$local_world',W) => ~ (acid(W)))))).
tff(make_c_acid, axiom, (? [W:'$world']: (('$accessible_world'('#idx(make_c)','$local_world',W) & acid(W))))).
tff(conj, conjecture, ((? [W:'$world']: (('$accessible_world'('#idx(pour_a)','$local_world',W) & ~ (acid(W))))) & (? [W:'$world']: (('$accessible_world'('#idx(pour_a)','$local_world',W) & (? [W0:'$world']: (('$accessible_world'('#idx(pour_b)',W,W0) & acid(W0))))))))).

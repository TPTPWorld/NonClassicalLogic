%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(u)_decl', type, '#idx(u)': '$index').
tff('#idx(c)_decl', type, '#idx(c)': '$index').
tff('mrel_reflexive_#idx(u)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(u)',W,W)))).
tff('mrel_transitive_#idx(u)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(u)',W,V) & '$accessible_world'('#idx(u)',V,U)) => '$accessible_world'('#idx(u)',W,U))))).
tff('mrel_reflexive_#idx(c)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(c)',W,W)))).
tff('mrel_transitive_#idx(c)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(c)',W,V) & '$accessible_world'('#idx(c)',V,U)) => '$accessible_world'('#idx(c)',W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(charge_decl, type, charge: ('$world' > $o)).
tff(called_decl, type, called: ('$world' > $o)).
tff(paid_decl, type, paid: ('$world' > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(aciom_paid_charge, axiom, (paid('$local_world') => called('$local_world'))).
tff(axiom_charge_u, axiom, (charge('$local_world') => ((! [W:'$world']: (('$accessible_world'('#idx(u)','$local_world',W) => charge(W)))) & (! [W:'$world']: (('$accessible_world'('#idx(c)','$local_world',W) => charge(W))))))).
tff(axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(u)','$local_world',W) => (called(W) => (! [W0:'$world']: (('$accessible_world'('#idx(c)',W,W0) => called(W0))))))))).
tff(axiom_2, axiom, (! [W:'$world']: (('$accessible_world'('#idx(c)','$local_world',W) => (paid(W) => (! [W0:'$world']: (('$accessible_world'('#idx(u)',W,W0) => paid(W0))))))))).
tff(axiom_3, axiom, (~ ((! [W:'$world']: (('$accessible_world'('#idx(c)','$local_world',W) => called(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(u)','$local_world',W) => ~ ((! [W0:'$world']: (('$accessible_world'('#idx(c)',W,W0) => called(W0)))))))))).
tff(axiom_4, axiom, (~ ((! [W:'$world']: (('$accessible_world'('#idx(u)','$local_world',W) => paid(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(c)','$local_world',W) => ~ ((! [W0:'$world']: (('$accessible_world'('#idx(u)',W,W0) => paid(W0)))))))))).
tff(requirement_1, conjecture, (~ ((charge('$local_world') => (called('$local_world') & ~ (paid('$local_world'))))) => (! [W:'$world']: (('$accessible_world'('#idx(u)','$local_world',W) => ~ ((charge(W) => (called(W) & ~ (paid(W)))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(a)_decl', type, '#idx(a)': '$index').
tff('#idx(b)_decl', type, '#idx(b)': '$index').
tff('mrel_reflexive_#idx(a)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(a)',W,W)))).
tff('mrel_transitive_#idx(a)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(a)',W,V) & '$accessible_world'('#idx(a)',V,U)) => '$accessible_world'('#idx(a)',W,U))))).
tff('mrel_reflexive_#idx(b)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(b)',W,W)))).
tff('mrel_transitive_#idx(b)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b)',W,V) & '$accessible_world'('#idx(b)',V,U)) => '$accessible_world'('#idx(b)',W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(p_decl, type, p: ('$world' > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(ab_axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (p(W) => (! [W0:'$world']: (('$accessible_world'('#idx(b)',W,W0) => p(W0))))))))).
tff(ab_axiom_2, axiom, (~ ((! [W:'$world']: (('$accessible_world'('#idx(b)','$local_world',W) => p(W))))) => (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => ~ ((! [W0:'$world']: (('$accessible_world'('#idx(b)',W,W0) => p(W0)))))))))).
tff(not_a_axiom_1, axiom, ~ (p('$local_world'))).
tff(conj, conjecture, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => ~ (p(W)))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(b_alice)_decl', type, '#idx(b_alice)': '$index').
tff('#idx(b_bob)_decl', type, '#idx(b_bob)': '$index').
tff('#idx(i_bob)_decl', type, '#idx(i_bob)': '$index').
tff('#idx(i_alice)_decl', type, '#idx(i_alice)': '$index').
tff('mrel_reflexive_#idx(b_alice)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(b_alice)',W,W)))).
tff('mrel_transitive_#idx(b_alice)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_alice)',W,V) & '$accessible_world'('#idx(b_alice)',V,U)) => '$accessible_world'('#idx(b_alice)',W,U))))).
tff('mrel_euclidean_#idx(b_alice)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_alice)',W,U) & '$accessible_world'('#idx(b_alice)',W,V)) => '$accessible_world'('#idx(b_alice)',U,V))))).
tff('mrel_reflexive_#idx(b_bob)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(b_bob)',W,W)))).
tff('mrel_transitive_#idx(b_bob)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_bob)',W,V) & '$accessible_world'('#idx(b_bob)',V,U)) => '$accessible_world'('#idx(b_bob)',W,U))))).
tff('mrel_euclidean_#idx(b_bob)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_bob)',W,U) & '$accessible_world'('#idx(b_bob)',W,V)) => '$accessible_world'('#idx(b_bob)',U,V))))).
tff('mrel_reflexive_#idx(i_bob)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(i_bob)',W,W)))).
tff('mrel_transitive_#idx(i_bob)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(i_bob)',W,V) & '$accessible_world'('#idx(i_bob)',V,U)) => '$accessible_world'('#idx(i_bob)',W,U))))).
tff('mrel_euclidean_#idx(i_bob)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(i_bob)',W,U) & '$accessible_world'('#idx(i_bob)',W,V)) => '$accessible_world'('#idx(i_bob)',U,V))))).
tff('mrel_reflexive_#idx(i_alice)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(i_alice)',W,W)))).
tff('mrel_transitive_#idx(i_alice)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(i_alice)',W,V) & '$accessible_world'('#idx(i_alice)',V,U)) => '$accessible_world'('#idx(i_alice)',W,U))))).
tff('mrel_euclidean_#idx(i_alice)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(i_alice)',W,U) & '$accessible_world'('#idx(i_alice)',W,V)) => '$accessible_world'('#idx(i_alice)',U,V))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(portland_decl, type, portland: $i).
tff(bigcity_decl, type, bigcity: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(axiom_1_alice, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_alice)','$local_world',W) => ((bigcity(W,portland) & (! [W0:'$world']: (('$accessible_world'('#idx(b_alice)',W,W0) => (! [W1:'$world']: (('$accessible_world'('#idx(b_bob)',W0,W1) => ~ (bigcity(W1,portland))))))))) => (! [W0:'$world']: (('$accessible_world'('#idx(i_alice)',W,W0) => (! [W1:'$world']: (('$accessible_world'('#idx(b_bob)',W0,W1) => bigcity(W1,portland)))))))))))).
tff(axiom_1_bob, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_bob)','$local_world',W) => ((bigcity(W,portland) & (! [W0:'$world']: (('$accessible_world'('#idx(b_bob)',W,W0) => (! [W1:'$world']: (('$accessible_world'('#idx(b_alice)',W0,W1) => ~ (bigcity(W1,portland))))))))) => (! [W0:'$world']: (('$accessible_world'('#idx(i_bob)',W,W0) => (! [W1:'$world']: (('$accessible_world'('#idx(b_alice)',W0,W1) => bigcity(W1,portland)))))))))))).
tff(axiom_2, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_alice)','$local_world',W) => bigcity(W,portland))))).
tff(axiom_3, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_alice)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(b_bob)',W,W0) => ~ (bigcity(W0,portland))))))))).
tff(con, conjecture, (! [W:'$world']: (('$accessible_world'('#idx(i_alice)','$local_world',W) => (! [W0:'$world']: (('$accessible_world'('#idx(b_bob)',W,W0) => bigcity(W0,portland)))))))).

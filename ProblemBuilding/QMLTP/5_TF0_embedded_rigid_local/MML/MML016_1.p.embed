%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(b_s)_decl', type, '#idx(b_s)': '$index').
tff('#idx(b_u)_decl', type, '#idx(b_u)': '$index').
tff('mrel_reflexive_#idx(b_s)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(b_s)',W,W)))).
tff('mrel_transitive_#idx(b_s)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_s)',W,V) & '$accessible_world'('#idx(b_s)',V,U)) => '$accessible_world'('#idx(b_s)',W,U))))).
tff('mrel_euclidean_#idx(b_s)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_s)',W,U) & '$accessible_world'('#idx(b_s)',W,V)) => '$accessible_world'('#idx(b_s)',U,V))))).
tff('mrel_reflexive_#idx(b_u)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(b_u)',W,W)))).
tff('mrel_transitive_#idx(b_u)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_u)',W,V) & '$accessible_world'('#idx(b_u)',V,U)) => '$accessible_world'('#idx(b_u)',W,U))))).
tff('mrel_euclidean_#idx(b_u)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(b_u)',W,U) & '$accessible_world'('#idx(b_u)',W,V)) => '$accessible_world'('#idx(b_u)',U,V))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(seventy_decl, type, seventy: $i).
tff(ninetyfive_decl, type, ninetyfive: $i).
tff(second_decl, type, second: $i).
tff(paris_decl, type, paris: $i).
tff(first_decl, type, first: $i).
tff(price_decl, type, price: (('$world' * $i) > $o)).
tff(dest_decl, type, dest: (('$world' * $i) > $o)).
tff(class_decl, type, class: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => ((dest(W,paris) & class(W,first)) => price(W,ninetyfive)))))).
tff(axiom_2, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => ((dest(W,paris) & class(W,second)) => price(W,seventy)))))).
tff(axiom_3_s, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => ~ ((class(W,first) & class(W,second))))))).
tff(axiom_3_u, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_u)','$local_world',W) => ~ ((class(W,first) & class(W,second))))))).
tff(axiom_4_s, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => ~ ((price(W,seventy) & price(W,ninetyfive))))))).
tff(axiom_4_u, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_u)','$local_world',W) => ~ ((price(W,seventy) & price(W,ninetyfive))))))).
tff(axiom_5, axiom, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => (dest(W,paris) & class(W,second)))))).
tff(con, conjecture, (! [W:'$world']: (('$accessible_world'('#idx(b_s)','$local_world',W) => price(W,seventy))))).

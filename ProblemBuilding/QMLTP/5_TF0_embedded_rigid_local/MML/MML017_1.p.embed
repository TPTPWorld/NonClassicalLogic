%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(a)_decl', type, '#idx(a)': '$index').
tff('#idx(s)_decl', type, '#idx(s)': '$index').
tff('#idx(bank)_decl', type, '#idx(bank)': '$index').
tff('mrel_reflexive_#idx(a)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(a)',W,W)))).
tff('mrel_transitive_#idx(a)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(a)',W,V) & '$accessible_world'('#idx(a)',V,U)) => '$accessible_world'('#idx(a)',W,U))))).
tff('mrel_reflexive_#idx(s)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(s)',W,W)))).
tff('mrel_transitive_#idx(s)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(s)',W,V) & '$accessible_world'('#idx(s)',V,U)) => '$accessible_world'('#idx(s)',W,U))))).
tff('mrel_reflexive_#idx(bank)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(bank)',W,W)))).
tff('mrel_transitive_#idx(bank)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(bank)',W,V) & '$accessible_world'('#idx(bank)',V,U)) => '$accessible_world'('#idx(bank)',W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(answerable_decl, type, answerable: ('$world' > $o)).
tff(fortytwo_decl, type, fortytwo: $i).
tff(s_decl, type, s: $i).
tff(number_decl, type, number: (('$world' * $i * $i) > $o)).
tff(code_decl, type, code: (('$world' * $i) > $o)).
tff(belong_decl, type, belong: (('$world' * $i * $i) > $o)).
tff(balance_decl, type, balance: (('$world' * $i * $i) > $o)).
tff(belongs_decl, type, belongs: (('$world' * $i * $i) > $o)).
tff(identifiable_decl, type, identifiable: (('$world' * $i) > $o)).
tff(value_decl, type, value: (('$world' * $i * $i) > $o)).
tff(done_decl, type, done: (('$world' * $i) > $o)).
tff(account_decl, type, account: (('$world' * $i) > $o)).
tff(u0_decl, type, u0: ($i > $i)).
tff(u1_decl, type, u1: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul_#idx(a)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(a)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_cumul_#idx(s)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(s)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_cumul_#idx(bank)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(bank)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_fortytwo_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,fortytwo)))).
tff('$exists_in_world_s_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,s)))).
tff('$exists_in_world_u0_mono', axiom, (! [W:'$world',X0:$i]: (('$exists_in_world_$i'(W,X0) => '$exists_in_world_$i'(W,u0(X0)))))).
tff('$exists_in_world_u1_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,u1(X0,X1))))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => (! [C:$i]: (('$exists_in_world_$i'(W,C) => (code(W,C) => (? [A:$i]: (('$exists_in_world_$i'(W,A) & (! [W0:'$world']: (('$accessible_world'('#idx(bank)',W,W0) => (account(W0,A) & (number(W0,A,C) & identifiable(W0,A))))))))))))))))).
tff(axiom_2, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => code(W,fortytwo))))).
tff(axiom_3, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (? [B:$i]: (('$exists_in_world_$i'(W,B) & (! [W0:'$world']: (('$accessible_world'('#idx(bank)',W,W0) => (account(W0,A) => balance(W0,A,B))))))))))))))).
tff(axiom_4, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((balance(W,A,B) & identifiable(W,A)) => identifiable(W,B)))))))))))).
tff(axiom_5, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => (balance(W,A,B) => (? [V:$i]: (('$exists_in_world_$i'(W,V) & (! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => value(W0,B,V)))))))))))))))))).
tff(axiom_phi0_aa, axiom, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => (account(W0,A) & (number(W0,A,fortytwo) & identifiable(W0,A)))))) & done(W,u0(A))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => belongs(W0,A,s)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => belong(W0,A,s))))))))))))).
tff(axiom_phi0_as, axiom, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (((! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => (account(W0,A) & (number(W0,A,fortytwo) & identifiable(W0,A)))))) & done(W,u0(A))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => belongs(W0,A,s)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => belong(W0,A,s))))))))))))).
tff(axiom_phi0_sa, axiom, (! [W:'$world']: (('$accessible_world'('#idx(s)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => (account(W0,A) & (number(W0,A,fortytwo) & identifiable(W0,A)))))) & done(W,u0(A))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => belongs(W0,A,s)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => belong(W0,A,s))))))))))))).
tff(axiom_phi0_ss, axiom, (! [W:'$world']: (('$accessible_world'('#idx(s)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => (account(W0,A) & (number(W0,A,fortytwo) & identifiable(W0,A)))))) & done(W,u0(A))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => belongs(W0,A,s)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => belong(W0,A,s))))))))))))).
tff(axiom_phi1_aa, axiom, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => ((account(W0,A) & (belongs(W0,A,s) & (balance(W0,A,B) & (identifiable(W0,B) & (? [V:$i]: (('$exists_in_world_$i'(W0,V) & (! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => value(W1,B,V))))))))))) & done(W0,u1(A,B)))))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => answerable(W0)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => answerable(W0)))))))))))))))).
tff(axiom_phi1_as, axiom, (! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => ((account(W0,A) & (belongs(W0,A,s) & (balance(W0,A,B) & (identifiable(W0,B) & (? [V:$i]: (('$exists_in_world_$i'(W0,V) & (! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => value(W1,B,V))))))))))) & done(W0,u1(A,B)))))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => answerable(W0)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => answerable(W0)))))))))))))))).
tff(axiom_phi1_sa, axiom, (! [W:'$world']: (('$accessible_world'('#idx(s)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => ((account(W0,A) & (belongs(W0,A,s) & (balance(W0,A,B) & (identifiable(W0,B) & (? [V:$i]: (('$exists_in_world_$i'(W0,V) & (! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => value(W1,B,V))))))))))) & done(W0,u1(A,B)))))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => answerable(W0)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => answerable(W0)))))))))))))))).
tff(axiom_phi1_ss, axiom, (! [W:'$world']: (('$accessible_world'('#idx(s)','$local_world',W) => (! [A:$i]: (('$exists_in_world_$i'(W,A) => (! [B:$i]: (('$exists_in_world_$i'(W,B) => ((! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => ((account(W0,A) & (belongs(W0,A,s) & (balance(W0,A,B) & (identifiable(W0,B) & (? [V:$i]: (('$exists_in_world_$i'(W0,V) & (! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => value(W1,B,V))))))))))) & done(W0,u1(A,B)))))) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => answerable(W0)))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => answerable(W0)))))))))))))))).
tff(con, conjecture, (? [U0:$i]: (('$exists_in_world_$i'('$local_world',U0) & ((! [W:'$world']: (('$accessible_world'('#idx(a)','$local_world',W) => (done(W,U0) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => (? [U1:$i]: (('$exists_in_world_$i'(W0,U1) & ((! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2))))))))) & (! [W1:'$world']: (('$accessible_world'('#idx(s)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2)))))))))))))))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => (? [U1:$i]: (('$exists_in_world_$i'(W0,U1) & ((! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2))))))))) & (! [W1:'$world']: (('$accessible_world'('#idx(s)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2))))))))))))))))))))) & (! [W:'$world']: (('$accessible_world'('#idx(s)','$local_world',W) => (done(W,U0) => ((! [W0:'$world']: (('$accessible_world'('#idx(a)',W,W0) => (? [U1:$i]: (('$exists_in_world_$i'(W0,U1) & ((! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2))))))))) & (! [W1:'$world']: (('$accessible_world'('#idx(s)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2)))))))))))))))) & (! [W0:'$world']: (('$accessible_world'('#idx(s)',W,W0) => (? [U1:$i]: (('$exists_in_world_$i'(W0,U1) & ((! [W1:'$world']: (('$accessible_world'('#idx(a)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2))))))))) & (! [W1:'$world']: (('$accessible_world'('#idx(s)',W0,W1) => (done(W1,U1) => ((! [W2:'$world']: (('$accessible_world'('#idx(a)',W1,W2) => answerable(W2)))) & (! [W2:'$world']: (('$accessible_world'('#idx(s)',W1,W2) => answerable(W2)))))))))))))))))))))))))).

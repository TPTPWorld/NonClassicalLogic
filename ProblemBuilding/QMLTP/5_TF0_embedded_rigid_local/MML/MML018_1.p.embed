%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:40 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$index_type', type, '$index': $tType).
tff('$accessible_world_decl', type, '$accessible_world': (('$index' * '$world' * '$world') > $o)).
tff('#idx(t)_decl', type, '#idx(t)': '$index').
tff('#idx(cr)_decl', type, '#idx(cr)': '$index').
tff('#idx(bank)_decl', type, '#idx(bank)': '$index').
tff('mrel_reflexive_#idx(t)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(t)',W,W)))).
tff('mrel_transitive_#idx(t)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(t)',W,V) & '$accessible_world'('#idx(t)',V,U)) => '$accessible_world'('#idx(t)',W,U))))).
tff('mrel_reflexive_#idx(cr)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(cr)',W,W)))).
tff('mrel_transitive_#idx(cr)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(cr)',W,V) & '$accessible_world'('#idx(cr)',V,U)) => '$accessible_world'('#idx(cr)',W,U))))).
tff('mrel_reflexive_#idx(bank)', axiom, (! [W:'$world']: ('$accessible_world'('#idx(bank)',W,W)))).
tff('mrel_transitive_#idx(bank)', axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'('#idx(bank)',W,V) & '$accessible_world'('#idx(bank)',V,U)) => '$accessible_world'('#idx(bank)',W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(p_decl, type, p: $i).
tff(fortytwo_decl, type, fortytwo: $i).
tff(balance_decl, type, balance: (('$world' * $i * $i) > $o)).
tff(account_decl, type, account: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul_#idx(t)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(t)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_cumul_#idx(cr)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(cr)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_cumul_#idx(bank)', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'('#idx(bank)',W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_p_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,p)))).
tff('$exists_in_world_fortytwo_mono', axiom, (! [W:'$world']: ('$exists_in_world_$i'(W,fortytwo)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(axiom_1, axiom, (! [W:'$world']: (('$accessible_world'('#idx(bank)','$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'('#idx(cr)',W,W0) => (account(W0,p,X) => (? [B:$i]: (('$exists_in_world_$i'(W0,B) & (! [W1:'$world']: (('$accessible_world'('#idx(t)',W0,W1) => balance(W1,p,B)))))))))))))))))).
tff(axiom_1_0, axiom, (! [W:'$world']: (('$accessible_world'('#idx(cr)','$local_world',W) => account(W,p,fortytwo))))).
tff(con, conjecture, (? [B:$i]: (('$exists_in_world_$i'('$local_world',B) & (! [W:'$world']: (('$accessible_world'('#idx(t)','$local_world',W) => balance(W,p,B)))))))).

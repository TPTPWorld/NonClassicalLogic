%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:33 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
tff(mrel_transitive, axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'(W,V) & '$accessible_world'(V,U)) => '$accessible_world'(W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
tff(union_decl, type, union: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [X:$i]: (qmltpeq('$local_world',X,X)))).
tff(symmetry, axiom, (! [X:$i,Y:$i]: ((qmltpeq('$local_world',X,Y) => qmltpeq('$local_world',Y,X))))).
tff(transitivity, axiom, (! [X:$i,Y:$i,Z:$i]: (((qmltpeq('$local_world',X,Y) & qmltpeq('$local_world',Y,Z)) => qmltpeq('$local_world',X,Z))))).
tff(union_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',union(A,C),union(B,C)))))).
tff(union_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',union(C,A),union(C,B)))))).
tff(member_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & member('$local_world',A,C)) => member('$local_world',B,C))))).
tff(member_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & member('$local_world',C,A)) => member('$local_world',C,B))))).
tff(subset_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & subset('$local_world',A,C)) => subset('$local_world',B,C))))).
tff(subset_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & subset('$local_world',C,A)) => subset('$local_world',C,B))))).
tff(subset_union, axiom, (! [B:$i,C:$i]: ((subset('$local_world',B,C) => qmltpeq('$local_world',union(B,C),C))))).
tff(union_defn, axiom, (! [B:$i,C:$i,D:$i]: ((member('$local_world',D,union(B,C)) <=> (member('$local_world',D,B) | member('$local_world',D,C)))))).
tff(equal_defn, axiom, (! [B:$i,C:$i]: ((qmltpeq('$local_world',B,C) <=> (subset('$local_world',B,C) & subset('$local_world',C,B)))))).
tff(commutativity_of_union, axiom, (! [B:$i,C:$i]: (qmltpeq('$local_world',union(B,C),union(C,B))))).
tff(subset_defn, axiom, (! [B:$i,C:$i]: ((subset('$local_world',B,C) <=> (! [D:$i]: ((member('$local_world',D,B) => member('$local_world',D,C)))))))).
tff(reflexivity_of_subset, axiom, (! [B:$i]: (subset('$local_world',B,B)))).
tff(equal_member_defn, axiom, (! [B:$i,C:$i]: ((qmltpeq('$local_world',B,C) <=> (! [D:$i]: ((member('$local_world',D,B) <=> member('$local_world',D,C)))))))).
tff(prove_idempotency_of_union, conjecture, (! [B:$i]: (qmltpeq('$local_world',union(B,B),B)))).

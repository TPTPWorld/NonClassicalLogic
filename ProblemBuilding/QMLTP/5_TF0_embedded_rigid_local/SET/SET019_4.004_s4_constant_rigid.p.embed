%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:36 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
tff(mrel_transitive, axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'(W,V) & '$accessible_world'(V,U)) => '$accessible_world'(W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(empty_set_decl, type, empty_set: $i).
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(equal_set_decl, type, equal_set: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
tff(singleton_decl, type, singleton: ($i > $i)).
tff(product_decl, type, product: ($i > $i)).
tff(unordered_pair_decl, type, unordered_pair: (($i * $i) > $i)).
tff(intersection_decl, type, intersection: (($i * $i) > $i)).
tff(difference_decl, type, difference: (($i * $i) > $i)).
tff(sum_decl, type, sum: ($i > $i)).
tff(union_decl, type, union: (($i * $i) > $i)).
tff(power_set_decl, type, power_set: ($i > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [X:$i]: (qmltpeq('$local_world',X,X)))).
tff(symmetry, axiom, (! [X:$i,Y:$i]: ((qmltpeq('$local_world',X,Y) => qmltpeq('$local_world',Y,X))))).
tff(transitivity, axiom, (! [X:$i,Y:$i,Z:$i]: (((qmltpeq('$local_world',X,Y) & qmltpeq('$local_world',Y,Z)) => qmltpeq('$local_world',X,Z))))).
tff(difference_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',difference(A,C),difference(B,C)))))).
tff(difference_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',difference(C,A),difference(C,B)))))).
tff(intersection_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',intersection(A,C),intersection(B,C)))))).
tff(intersection_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',intersection(C,A),intersection(C,B)))))).
tff(power_set_substitution_1, axiom, (! [A:$i,B:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',power_set(A),power_set(B)))))).
tff(product_substitution_1, axiom, (! [A:$i,B:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',product(A),product(B)))))).
tff(singleton_substitution_1, axiom, (! [A:$i,B:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',singleton(A),singleton(B)))))).
tff(sum_substitution_1, axiom, (! [A:$i,B:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',sum(A),sum(B)))))).
tff(union_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',union(A,C),union(B,C)))))).
tff(union_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',union(C,A),union(C,B)))))).
tff(unordered_pair_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',unordered_pair(A,C),unordered_pair(B,C)))))).
tff(unordered_pair_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: ((qmltpeq('$local_world',A,B) => qmltpeq('$local_world',unordered_pair(C,A),unordered_pair(C,B)))))).
tff(equal_set_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & equal_set('$local_world',A,C)) => equal_set('$local_world',B,C))))).
tff(equal_set_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & equal_set('$local_world',C,A)) => equal_set('$local_world',C,B))))).
tff(member_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & member('$local_world',A,C)) => member('$local_world',B,C))))).
tff(member_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & member('$local_world',C,A)) => member('$local_world',C,B))))).
tff(subset_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & subset('$local_world',A,C)) => subset('$local_world',B,C))))).
tff(subset_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((qmltpeq('$local_world',A,B) & subset('$local_world',C,A)) => subset('$local_world',C,B))))).
tff(subset_0, axiom, (! [A:$i,B:$i]: ((subset('$local_world',A,B) <=> (! [X:$i]: ((member('$local_world',X,A) => member('$local_world',X,B)))))))).
tff(equal_set_0, axiom, (! [A:$i,B:$i]: ((equal_set('$local_world',A,B) <=> (subset('$local_world',A,B) & subset('$local_world',B,A)))))).
tff(power_set_0, axiom, (! [X:$i,A:$i]: ((member('$local_world',X,power_set(A)) <=> subset('$local_world',X,A))))).
tff(intersection_0, axiom, (! [X:$i,A:$i,B:$i]: ((member('$local_world',X,intersection(A,B)) <=> (member('$local_world',X,A) & member('$local_world',X,B)))))).
tff(union_0, axiom, (! [X:$i,A:$i,B:$i]: ((member('$local_world',X,union(A,B)) <=> (member('$local_world',X,A) | member('$local_world',X,B)))))).
tff(empty_set_0, axiom, (! [X:$i]: (~ (member('$local_world',X,empty_set))))).
tff(difference_0, axiom, (! [B:$i,A:$i,E:$i]: ((member('$local_world',B,difference(E,A)) <=> (member('$local_world',B,E) & ~ (member('$local_world',B,A))))))).
tff(singleton_0, axiom, (! [X:$i,A:$i]: ((member('$local_world',X,singleton(A)) <=> qmltpeq('$local_world',X,A))))).
tff(unordered_pair_0, axiom, (! [X:$i,A:$i,B:$i]: ((member('$local_world',X,unordered_pair(A,B)) <=> (qmltpeq('$local_world',X,A) | qmltpeq('$local_world',X,B)))))).
tff(sum_0, axiom, (! [X:$i,A:$i]: ((member('$local_world',X,sum(A)) <=> (? [Y:$i]: ((member('$local_world',Y,A) & member('$local_world',X,Y)))))))).
tff(product_0, axiom, (! [X:$i,A:$i]: ((member('$local_world',X,product(A)) <=> (! [Y:$i]: ((member('$local_world',Y,A) => member('$local_world',X,Y)))))))).
tff(thI02, conjecture, (! [A:$i,B:$i]: (((subset('$local_world',A,B) & subset('$local_world',B,A)) => equal_set('$local_world',A,B))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:38 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(k_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_K),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_cumul', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(W,V)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(subset_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (subset('$local_world',B,C) <=> (! [D:$i]: (('$exists_in_world_$i'('$local_world',D) => (member('$local_world',D,B) => member('$local_world',D,C)))))))))).
tff(reflexivity_of_subset, axiom, (! [B:$i]: (('$exists_in_world_$i'('$local_world',B) => subset('$local_world',B,B))))).
tff(prove_transitivity_of_subset, conjecture, (! [B:$i,C:$i,D:$i]: (((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) & '$exists_in_world_$i'('$local_world',D)) => ((subset('$local_world',B,C) & subset('$local_world',C,D)) => subset('$local_world',B,D)))))).

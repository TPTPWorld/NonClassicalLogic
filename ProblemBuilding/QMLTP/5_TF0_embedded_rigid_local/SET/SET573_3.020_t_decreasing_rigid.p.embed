%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:42 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_decreasing_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($decreasing),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(intersect_decl, type, intersect: (('$world' * $i * $i) > $o)).
tff(disjoint_decl, type, disjoint: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_decr', axiom, (! [W:'$world',V:'$world',X:$i]: ((('$exists_in_world_$i'(W,X) & '$accessible_world'(V,W)) => '$exists_in_world_$i'(V,X))))).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(intersect_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (intersect('$local_world',B,C) <=> (? [D:$i]: (('$exists_in_world_$i'('$local_world',D) & (member('$local_world',D,B) & member('$local_world',D,C)))))))))).
tff(disjoint_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (disjoint('$local_world',B,C) <=> ~ (intersect('$local_world',B,C))))))).
tff(symmetry_of_intersect, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (intersect('$local_world',B,C) => intersect('$local_world',C,B)))))).
tff(prove_th12, conjecture, (! [B:$i,C:$i,D:$i]: (((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) & '$exists_in_world_$i'('$local_world',D)) => ((member('$local_world',B,C) & disjoint('$local_world',C,D)) => ~ (member('$local_world',B,D))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:43 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_reflexive, axiom, (! [W:'$world']: ('$accessible_world'(W,W)))).
tff(mrel_transitive, axiom, (! [W:'$world',V:'$world',U:'$world']: ((('$accessible_world'(W,V) & '$accessible_world'(V,U)) => '$accessible_world'(W,U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(member_decl, type, member: (('$world' * $i * $i) > $o)).
tff(subset_decl, type, subset: (('$world' * $i * $i) > $o)).
tff(intersection_decl, type, intersection: (($i * $i) > $i)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
tff('$exists_in_world_intersection_mono', axiom, (! [W:'$world',X0:$i,X1:$i]: (('$exists_in_world_$i'(W,X0) => ('$exists_in_world_$i'(W,X1) => '$exists_in_world_$i'(W,intersection(X0,X1))))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [X:$i]: (('$exists_in_world_$i'('$local_world',X) => qmltpeq('$local_world',X,X))))).
tff(symmetry, axiom, (! [X:$i,Y:$i]: ((('$exists_in_world_$i'('$local_world',X) & '$exists_in_world_$i'('$local_world',Y)) => (qmltpeq('$local_world',X,Y) => qmltpeq('$local_world',Y,X)))))).
tff(transitivity, axiom, (! [X:$i,Y:$i,Z:$i]: (((('$exists_in_world_$i'('$local_world',X) & '$exists_in_world_$i'('$local_world',Y)) & '$exists_in_world_$i'('$local_world',Z)) => ((qmltpeq('$local_world',X,Y) & qmltpeq('$local_world',Y,Z)) => qmltpeq('$local_world',X,Z)))))).
tff(intersection_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => (qmltpeq('$local_world',A,B) => qmltpeq('$local_world',intersection(A,C),intersection(B,C))))))).
tff(intersection_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => (qmltpeq('$local_world',A,B) => qmltpeq('$local_world',intersection(C,A),intersection(C,B))))))).
tff(member_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => ((qmltpeq('$local_world',A,B) & member('$local_world',A,C)) => member('$local_world',B,C)))))).
tff(member_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => ((qmltpeq('$local_world',A,B) & member('$local_world',C,A)) => member('$local_world',C,B)))))).
tff(subset_substitution_1, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => ((qmltpeq('$local_world',A,B) & subset('$local_world',A,C)) => subset('$local_world',B,C)))))).
tff(subset_substitution_2, axiom, (! [A:$i,B:$i,C:$i]: (((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) & '$exists_in_world_$i'('$local_world',C)) => ((qmltpeq('$local_world',A,B) & subset('$local_world',C,A)) => subset('$local_world',C,B)))))).
tff(intersection_defn, axiom, (! [B:$i,C:$i,D:$i]: (((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) & '$exists_in_world_$i'('$local_world',D)) => (member('$local_world',D,intersection(B,C)) <=> (member('$local_world',D,B) & member('$local_world',D,C))))))).
tff(equal_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (qmltpeq('$local_world',B,C) <=> (subset('$local_world',B,C) & subset('$local_world',C,B))))))).
tff(commutativity_of_intersection, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => qmltpeq('$local_world',intersection(B,C),intersection(C,B)))))).
tff(subset_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (subset('$local_world',B,C) <=> (! [D:$i]: (('$exists_in_world_$i'('$local_world',D) => (member('$local_world',D,B) => member('$local_world',D,C)))))))))).
tff(reflexivity_of_subset, axiom, (! [B:$i]: (('$exists_in_world_$i'('$local_world',B) => subset('$local_world',B,B))))).
tff(equal_member_defn, axiom, (! [B:$i,C:$i]: ((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) => (qmltpeq('$local_world',B,C) <=> (! [D:$i]: (('$exists_in_world_$i'('$local_world',D) => (member('$local_world',D,B) <=> member('$local_world',D,C)))))))))).
tff(prove_th19, conjecture, (! [B:$i,C:$i,D:$i]: (((('$exists_in_world_$i'('$local_world',B) & '$exists_in_world_$i'('$local_world',C)) & '$exists_in_world_$i'('$local_world',D)) => ((! [E:$i]: (('$exists_in_world_$i'('$local_world',E) => (member('$local_world',E,B) <=> (member('$local_world',E,C) & member('$local_world',E,D)))))) => qmltpeq('$local_world',B,intersection(C,D))))))).

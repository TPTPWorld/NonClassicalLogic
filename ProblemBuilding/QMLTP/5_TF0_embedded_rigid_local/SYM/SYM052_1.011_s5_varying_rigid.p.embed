%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:05:55 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(a_decl, type, a: ('$world' > $o)).
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(e_decl, type, e: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
tff('$exists_in_world_$i_decl', type, '$exists_in_world_$i': (('$world' * $i) > $o)).
tff('$exists_in_world_$i_nonempty', axiom, (! [W:'$world']: ((? [X:$i]: ('$exists_in_world_$i'(W,X)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [X:$i]: (('$exists_in_world_$i'('$local_world',X) => qmltpeq('$local_world',X,X))))).
tff(symmetry, axiom, (! [X:$i,Y:$i]: ((('$exists_in_world_$i'('$local_world',X) & '$exists_in_world_$i'('$local_world',Y)) => (qmltpeq('$local_world',X,Y) => qmltpeq('$local_world',Y,X)))))).
tff(transitivity, axiom, (! [X:$i,Y:$i,Z:$i]: (((('$exists_in_world_$i'('$local_world',X) & '$exists_in_world_$i'('$local_world',Y)) & '$exists_in_world_$i'('$local_world',Z)) => ((qmltpeq('$local_world',X,Y) & qmltpeq('$local_world',Y,Z)) => qmltpeq('$local_world',X,Z)))))).
tff(e_substitution_1, axiom, (! [A:$i,B:$i]: ((('$exists_in_world_$i'('$local_world',A) & '$exists_in_world_$i'('$local_world',B)) => ((qmltpeq('$local_world',A,B) & e('$local_world',A)) => e('$local_world',B)))))).
tff(con, conjecture, (((? [W:'$world']: (('$accessible_world'('$local_world',W) & (? [X:$i]: (('$exists_in_world_$i'(W,X) & (? [W0:'$world']: (('$accessible_world'(W,W0) & (? [Y:$i]: (('$exists_in_world_$i'(W0,Y) & ~ (qmltpeq(W0,X,Y)))))))))))))) & (a('$local_world') & (! [W:'$world']: (('$accessible_world'('$local_world',W) => (! [X:$i]: (('$exists_in_world_$i'(W,X) => (! [W0:'$world']: (('$accessible_world'(W,W0) => (a(W0) => e(W0,X))))))))))))) => (? [X:$i]: (('$exists_in_world_$i'('$local_world',X) & (? [Y:$i]: (('$exists_in_world_$i'('$local_world',Y) & ~ (qmltpeq('$local_world',X,Y)))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:06:00 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: SILENT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
tff('$world_type', type, '$world': $tType).
tff('$local_world_decl', type, '$local_world': '$world').
tff('$accessible_world_decl', type, '$accessible_world': (('$world' * '$world') > $o)).
tff(mrel_universal, axiom, (! [W:'$world',V:'$world']: ('$accessible_world'(W,V)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
tff(qmltpeq_decl, type, qmltpeq: (('$world' * $i * $i) > $o)).
tff(n_decl, type, n: (('$world' * $i) > $o)).
tff(o_decl, type, o: (('$world' * $i) > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
tff(reflexivity, axiom, (! [X:$i]: (qmltpeq('$local_world',X,X)))).
tff(symmetry, axiom, (! [X:$i,Y:$i]: ((qmltpeq('$local_world',X,Y) => qmltpeq('$local_world',Y,X))))).
tff(transitivity, axiom, (! [X:$i,Y:$i,Z:$i]: (((qmltpeq('$local_world',X,Y) & qmltpeq('$local_world',Y,Z)) => qmltpeq('$local_world',X,Z))))).
tff(n_substitution_1, axiom, (! [A:$i,B:$i]: (((qmltpeq('$local_world',A,B) & n('$local_world',A)) => n('$local_world',B))))).
tff(o_substitution_1, axiom, (! [A:$i,B:$i]: (((qmltpeq('$local_world',A,B) & o('$local_world',A)) => o('$local_world',B))))).
tff(con, conjecture, ((? [X:$i]: ((n('$local_world',X) & ((! [Y:$i]: ((n('$local_world',Y) => qmltpeq('$local_world',Y,X)))) & (! [W:'$world']: (('$accessible_world'('$local_world',W) => o(W,X)))))))) => (! [W:'$world']: (('$accessible_world'('$local_world',W) => (? [X:$i]: ((n(W,X) & ((! [Y:$i]: ((n(W,Y) => qmltpeq(W,Y,X)))) & o(W,X)))))))))).

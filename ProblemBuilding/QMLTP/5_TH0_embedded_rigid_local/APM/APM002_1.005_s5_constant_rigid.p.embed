%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:07:24 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s5_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S5),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mrel_decl, type, mrel: (mworld > (mworld > $o))).
thf(mbox_decl, type, mbox: ((mworld > $o) > (mworld > $o))).
thf(mbox_def, definition, (mbox = (^ [Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: ((((mrel @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: ((mworld > $o) > (mworld > $o))).
thf(mdia_def, definition, (mdia = (^ [Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: ((((mrel @ W) @ V) & (Phi @ V)))))))).
thf(mrel_universal, axiom, (! [W:mworld,V:mworld]: (((mrel @ W) @ V)))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(a_decl, type, a: $i).
thf(b_decl, type, b: $i).
thf(c_decl, type, c: $i).
thf(p_decl, type, p: (mworld > ($i > $o))).
thf(r_decl, type, r: (mworld > ($i > $o))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(schema1, axiom, (mlocal @ (^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((~ (((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))) @ W) | ((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W)))) @ W) & ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (c)) @ W)))) @ W) <=> ((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W)))) @ W) & ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) => ((mdia @ (^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (b)) @ W))))) @ W)))) @ W) & ((^ [W:mworld]: ((((^ [W:mworld]: ((~ (((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))) @ W) => ((mdia @ (^ [W:mworld]: ((((^ [W:mworld]: ((~ (((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))) @ W) & ((^ [W:mworld]: ((~ (((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (c)) @ W)))) @ W))))) @ W))))) @ W)))) @ W)))) @ W)))) @ W)))))).
thf(schema2, axiom, (mlocal @ (^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) => ((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W)))) @ W) & ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (c)) @ W)))) @ W) | ((^ [W:mworld]: ((~ (((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))) @ W)))) @ W) & ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) & ((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W)))) @ W) => ((mdia @ (^ [W:mworld]: ((~ (((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W)))))) @ W)))) @ W)))) @ W)))))).
thf(integration_assertion, axiom, (mlocal @ (^ [W:mworld]: ((! [X:$i]: (((^ [W:mworld]: ((((^ [W:mworld]: (((p @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W) <=> ((^ [W:mworld]: (((r @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W)))) @ W))))))).
thf(con, conjecture, (mlocal @ (^ [W:mworld]: ($false)))).

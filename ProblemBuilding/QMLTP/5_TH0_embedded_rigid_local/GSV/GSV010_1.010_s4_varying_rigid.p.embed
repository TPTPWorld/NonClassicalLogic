%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:08:19 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mrel_decl, type, mrel: (mworld > (mworld > $o))).
thf(mbox_decl, type, mbox: ((mworld > $o) > (mworld > $o))).
thf(mbox_def, definition, (mbox = (^ [Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: ((((mrel @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: ((mworld > $o) > (mworld > $o))).
thf(mdia_def, definition, (mdia = (^ [Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: ((((mrel @ W) @ V) & (Phi @ V)))))))).
thf(mrel_reflexive, axiom, (! [W:mworld]: (((mrel @ W) @ W)))).
thf(mrel_transitive, axiom, (! [W:mworld,V:mworld,U:mworld]: (((((mrel @ W) @ V) & ((mrel @ V) @ U)) => ((mrel @ W) @ U))))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(bt_decl, type, bt: $i).
thf(an_a_nonce_decl, type, an_a_nonce: $i).
thf(a_decl, type, a: $i).
thf(b_decl, type, b: $i).
thf(at_decl, type, at: $i).
thf(t_decl, type, t: $i).
thf(a_holds_decl, type, a_holds: (mworld > ($i > $o))).
thf(t_holds_decl, type, t_holds: (mworld > ($i > $o))).
thf(party_of_protocol_decl, type, party_of_protocol: (mworld > ($i > $o))).
thf(a_stored_decl, type, a_stored: (mworld > ($i > $o))).
thf(fresh_to_b_decl, type, fresh_to_b: (mworld > ($i > $o))).
thf(b_stored_decl, type, b_stored: (mworld > ($i > $o))).
thf(b_holds_decl, type, b_holds: (mworld > ($i > $o))).
thf(message_decl, type, message: (mworld > ($i > $o))).
thf(generate_b_nonce_decl, type, generate_b_nonce: ($i > $i)).
thf(quadruple_decl, type, quadruple: ($i > ($i > ($i > ($i > $i))))).
thf(triple_decl, type, triple: ($i > ($i > ($i > $i)))).
thf(encrypt_decl, type, encrypt: ($i > ($i > $i))).
thf(generate_key_decl, type, generate_key: ($i > $i)).
thf(generate_expiration_time_decl, type, generate_expiration_time: ($i > $i)).
thf(sent_decl, type, sent: ($i > ($i > ($i > $i)))).
thf(key_decl, type, key: ($i > ($i > $i))).
thf(pair_decl, type, pair: ($i > ($i > $i))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
thf(eiw_di_decl, type, eiw_di: ($i > (mworld > $o))).
thf(eiw_di_nonempty, axiom, (! [W:mworld]: ((? [X:$i]: (((eiw_di @ X) @ W)))))).
thf(eiw_bt_mono, axiom, (! [W:mworld]: (((eiw_di @ bt) @ W)))).
thf(eiw_an_a_nonce_mono, axiom, (! [W:mworld]: (((eiw_di @ an_a_nonce) @ W)))).
thf(eiw_key_mono, axiom, (! [W:mworld,X0:$i,X1:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => ((eiw_di @ ((key @ X0) @ X1)) @ W)))))).
thf(eiw_sent_mono, axiom, (! [W:mworld,X0:$i,X1:$i,X2:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => (((eiw_di @ X2) @ W) => ((eiw_di @ (((sent @ X0) @ X1) @ X2)) @ W))))))).
thf(eiw_b_mono, axiom, (! [W:mworld]: (((eiw_di @ b) @ W)))).
thf(eiw_t_mono, axiom, (! [W:mworld]: (((eiw_di @ t) @ W)))).
thf(eiw_generate_expiration_time_mono, axiom, (! [W:mworld,X0:$i]: ((((eiw_di @ X0) @ W) => ((eiw_di @ (generate_expiration_time @ X0)) @ W))))).
thf(eiw_quadruple_mono, axiom, (! [W:mworld,X0:$i,X1:$i,X2:$i,X3:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => (((eiw_di @ X2) @ W) => (((eiw_di @ X3) @ W) => ((eiw_di @ ((((quadruple @ X0) @ X1) @ X2) @ X3)) @ W)))))))).
thf(eiw_at_mono, axiom, (! [W:mworld]: (((eiw_di @ at) @ W)))).
thf(eiw_triple_mono, axiom, (! [W:mworld,X0:$i,X1:$i,X2:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => (((eiw_di @ X2) @ W) => ((eiw_di @ (((triple @ X0) @ X1) @ X2)) @ W))))))).
thf(eiw_generate_key_mono, axiom, (! [W:mworld,X0:$i]: ((((eiw_di @ X0) @ W) => ((eiw_di @ (generate_key @ X0)) @ W))))).
thf(eiw_encrypt_mono, axiom, (! [W:mworld,X0:$i,X1:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => ((eiw_di @ ((encrypt @ X0) @ X1)) @ W)))))).
thf(eiw_a_mono, axiom, (! [W:mworld]: (((eiw_di @ a) @ W)))).
thf(eiw_pair_mono, axiom, (! [W:mworld,X0:$i,X1:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => ((eiw_di @ ((pair @ X0) @ X1)) @ W)))))).
thf(eiw_generate_b_nonce_mono, axiom, (! [W:mworld,X0:$i]: ((((eiw_di @ X0) @ W) => ((eiw_di @ (generate_b_nonce @ X0)) @ W))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(a_holds_key_at_for_t, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((a_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (at)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W))))))).
thf(a_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (a)) @ W))))))).
thf(a_sent_message_i_to_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W))))))).
thf(a_stored_message_i, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((a_stored @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W))))))).
thf(a_forwards_secure, axiom, (mlocal @ (mbox @ (^ [W:mworld]: ((! [U:$i]: ((((eiw_di @ U) @ W) => ((mbox @ (^ [W:mworld]: ((! [V:$i]: ((((eiw_di @ V) @ W) => ((mbox @ (^ [W0:mworld]: ((! [W:$i]: ((((eiw_di @ W) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [X:$i]: ((((eiw_di @ X) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [Y:$i]: ((((eiw_di @ Y) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [Z:$i]: ((((eiw_di @ Z) @ W0) => ((mbox @ (^ [W0:mworld]: ((((^ [W0:mworld]: ((((mbox @ (^ [W0:mworld]: (((message @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (sent)) @ W0) @ ((^ [W0:mworld]: (t)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (a)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (triple)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (encrypt)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (quadruple)) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Z)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (V)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (at)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0)))) @ W0))))) @ W0) & ((mbox @ (^ [W0:mworld]: (((a_stored @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (pair)) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Z)) @ W0)))) @ W0))))) @ W0)))) @ W0) => ((^ [W0:mworld]: ((((mbox @ (^ [W0:mworld]: (((message @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (sent)) @ W0) @ ((^ [W0:mworld]: (a)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (pair)) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (encrypt)) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0)))) @ W0)))) @ W0))))) @ W0) & ((mbox @ (^ [W0:mworld]: (((a_holds @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (key)) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0))))) @ W0)))) @ W0))))) @ W0))))))) @ W0))))))) @ W0))))))) @ W0))))))) @ W))))))) @ W))))))))).
thf(b_hold_key_bt_for_t, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((b_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W))))))).
thf(b_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (b)) @ W))))))).
thf(nonce_a_is_fresh_to_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((fresh_to_b @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W))))))).
thf(b_creates_freash_nonces_in_time, axiom, (mlocal @ (mbox @ (^ [W:mworld]: ((! [U:$i]: ((((eiw_di @ U) @ W) => ((mbox @ (^ [W:mworld]: ((! [V:$i]: ((((eiw_di @ V) @ W) => ((mbox @ (^ [W:mworld]: ((((^ [W:mworld]: ((((mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W)))) @ W))))) @ W) & ((mbox @ (^ [W:mworld]: (((fresh_to_b @ W) @ ((^ [W:mworld]: (V)) @ W))))) @ W)))) @ W) => ((^ [W:mworld]: ((((mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_b_nonce)) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W)))) @ W)))) @ W))))) @ W) & ((mbox @ (^ [W:mworld]: (((b_stored @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W))))) @ W)))) @ W))))) @ W))))))) @ W))))))))).
thf(b_accepts_secure_session_key, axiom, (mlocal @ (mbox @ (^ [W:mworld]: ((! [V:$i]: ((((eiw_di @ V) @ W) => ((mbox @ (^ [W:mworld]: ((! [X:$i]: ((((eiw_di @ X) @ W) => ((mbox @ (^ [W:mworld]: ((! [Y:$i]: ((((eiw_di @ Y) @ W) => ((mbox @ (^ [W:mworld]: ((((^ [W:mworld]: ((((mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (Y)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_b_nonce)) @ W) @ ((^ [W:mworld]: (Y)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W)))) @ W)))) @ W))))) @ W) & ((mbox @ (^ [W:mworld]: (((b_stored @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W) @ ((^ [W:mworld]: (Y)) @ W)))) @ W))))) @ W)))) @ W) => ((mbox @ (^ [W:mworld]: (((b_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (V)) @ W)))) @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W))))) @ W))))) @ W))))))) @ W))))))) @ W))))))))).
thf(t_holds_key_at_for_a, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((t_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (at)) @ W)))) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))))).
thf(t_holds_key_bt_for_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((t_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))))).
thf(t_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (t)) @ W))))))).
thf(server_t_generates_key, axiom, (mlocal @ (mbox @ (^ [W:mworld]: ((! [U:$i]: ((((eiw_di @ U) @ W) => ((mbox @ (^ [W:mworld]: ((! [V:$i]: ((((eiw_di @ V) @ W) => ((mbox @ (^ [W0:mworld]: ((! [W:$i]: ((((eiw_di @ W) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [X:$i]: ((((eiw_di @ X) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [Y:$i]: ((((eiw_di @ Y) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [Z:$i]: ((((eiw_di @ Z) @ W0) => ((mbox @ (^ [W0:mworld]: ((! [X1:$i]: ((((eiw_di @ X1) @ W0) => ((mbox @ (^ [W0:mworld]: ((((^ [W0:mworld]: ((((mbox @ (^ [W0:mworld]: (((message @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (sent)) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (t)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (triple)) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (V)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (encrypt)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (triple)) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Z)) @ W0)))) @ W0)))) @ W0)))) @ W0))))) @ W0) & ((^ [W0:mworld]: ((((mbox @ (^ [W0:mworld]: (((t_holds @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (key)) @ W0) @ ((^ [W0:mworld]: (Z)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0))))) @ W0) & ((mbox @ (^ [W0:mworld]: (((t_holds @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (key)) @ W0) @ ((^ [W0:mworld]: (X1)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0))))) @ W0)))) @ W0)))) @ W0) => ((mbox @ (^ [W0:mworld]: (((message @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (sent)) @ W0) @ ((^ [W0:mworld]: (t)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (triple)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (encrypt)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (quadruple)) @ W0) @ ((^ [W0:mworld]: (U)) @ W0)))) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: (generate_key)) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (X1)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (encrypt)) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: ((((^ [W0:mworld]: (triple)) @ W0) @ ((^ [W0:mworld]: (W)) @ W0)))) @ W0) @ ((^ [W0:mworld]: ((((^ [W0:mworld]: (generate_key)) @ W0) @ ((^ [W0:mworld]: (X)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Y)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (Z)) @ W0)))) @ W0)))) @ W0) @ ((^ [W0:mworld]: (V)) @ W0)))) @ W0)))) @ W0))))) @ W0))))) @ W0))))))) @ W0))))))) @ W0))))))) @ W0))))))) @ W0))))))) @ W))))))) @ W))))))))).

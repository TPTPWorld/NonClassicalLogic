%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:08:19 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_constant_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($constant),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mrel_decl, type, mrel: (mworld > (mworld > $o))).
thf(mbox_decl, type, mbox: ((mworld > $o) > (mworld > $o))).
thf(mbox_def, definition, (mbox = (^ [Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: ((((mrel @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: ((mworld > $o) > (mworld > $o))).
thf(mdia_def, definition, (mdia = (^ [Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: ((((mrel @ W) @ V) & (Phi @ V)))))))).
thf(mrel_reflexive, axiom, (! [W:mworld]: (((mrel @ W) @ W)))).
thf(mrel_transitive, axiom, (! [W:mworld,V:mworld,U:mworld]: (((((mrel @ W) @ V) & ((mrel @ V) @ U)) => ((mrel @ W) @ U))))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(an_a_nonce_decl, type, an_a_nonce: $i).
thf(at_decl, type, at: $i).
thf(bt_decl, type, bt: $i).
thf(a_decl, type, a: $i).
thf(b_decl, type, b: $i).
thf(t_decl, type, t: $i).
thf(a_holds_decl, type, a_holds: (mworld > ($i > $o))).
thf(t_holds_decl, type, t_holds: (mworld > ($i > $o))).
thf(party_of_protocol_decl, type, party_of_protocol: (mworld > ($i > $o))).
thf(a_stored_decl, type, a_stored: (mworld > ($i > $o))).
thf(fresh_to_b_decl, type, fresh_to_b: (mworld > ($i > $o))).
thf(b_stored_decl, type, b_stored: (mworld > ($i > $o))).
thf(b_holds_decl, type, b_holds: (mworld > ($i > $o))).
thf(message_decl, type, message: (mworld > ($i > $o))).
thf(generate_b_nonce_decl, type, generate_b_nonce: ($i > $i)).
thf(quadruple_decl, type, quadruple: ($i > ($i > ($i > ($i > $i))))).
thf(triple_decl, type, triple: ($i > ($i > ($i > $i)))).
thf(generate_key_decl, type, generate_key: ($i > $i)).
thf(encrypt_decl, type, encrypt: ($i > ($i > $i))).
thf(generate_expiration_time_decl, type, generate_expiration_time: ($i > $i)).
thf(sent_decl, type, sent: ($i > ($i > ($i > $i)))).
thf(key_decl, type, key: ($i > ($i > $i))).
thf(pair_decl, type, pair: ($i > ($i > $i))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(a_holds_key_at_for_t, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((a_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (at)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W))))))).
thf(a_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (a)) @ W))))))).
thf(a_sent_message_i_to_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W))))))).
thf(a_stored_message_i, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((a_stored @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W))))))).
thf(b_hold_key_bt_for_t, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((b_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W))))))).
thf(b_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (b)) @ W))))))).
thf(nonce_a_is_fresh_to_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((fresh_to_b @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W))))))).
thf(t_holds_key_at_for_a, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((t_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (at)) @ W)))) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))))).
thf(t_holds_key_bt_for_b, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((t_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))))).
thf(t_is_party_of_protocol, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((party_of_protocol @ W) @ ((^ [W:mworld]: (t)) @ W))))))).
thf(ax1, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((b_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))))).
thf(ax2, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_b_nonce)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W)))) @ W))))))).
thf(ax3, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((a_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))))).
thf(ax4, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (quadruple)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (at)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_key)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_b_nonce)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W))))))).
thf(ax5, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((message @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (sent)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: (t)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_b_nonce)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (encrypt)) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (triple)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: (generate_expiration_time)) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: (bt)) @ W)))) @ W)))) @ W)))) @ W))))))).
thf(ax6, axiom, (mlocal @ (mbox @ (^ [W:mworld]: (((b_stored @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (pair)) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W) @ ((^ [W:mworld]: (an_a_nonce)) @ W)))) @ W))))))).
thf(co1, conjecture, (mlocal @ (^ [W:mworld]: ((? [U:$i]: (((^ [W:mworld]: ((((mbox @ (^ [W:mworld]: (((a_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (b)) @ W)))) @ W))))) @ W) & ((mbox @ (^ [W:mworld]: (((b_holds @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (key)) @ W) @ ((^ [W:mworld]: (U)) @ W)))) @ W) @ ((^ [W:mworld]: (a)) @ W)))) @ W))))) @ W)))) @ W))))))).

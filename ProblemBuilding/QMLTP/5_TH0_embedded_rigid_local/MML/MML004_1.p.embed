%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:57 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mindex_type, type, mindex: $tType).
thf(mrel_decl, type, mrel: (mindex > (mworld > (mworld > $o)))).
thf('#always_decl', type, '#always': mindex).
thf('#load_decl', type, '#load': mindex).
thf('#shoot_decl', type, '#shoot': mindex).
thf(mbox_decl, type, mbox: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mbox_def, definition, (mbox = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: (((((mrel @ R) @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mdia_def, definition, (mdia = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: (((((mrel @ R) @ W) @ V) & (Phi @ V)))))))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
thf('mrel_#always_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#always') @ W) @ W)))).
thf('mrel_#always_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#always') @ W) @ V) & (((mrel @ '#always') @ V) @ U)) => (((mrel @ '#always') @ W) @ U))))).
thf('mrel_#load_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#load') @ W) @ W)))).
thf('mrel_#load_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#load') @ W) @ V) & (((mrel @ '#load') @ V) @ U)) => (((mrel @ '#load') @ W) @ U))))).
thf('mrel_#shoot_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#shoot') @ W) @ W)))).
thf('mrel_#shoot_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#shoot') @ W) @ V) & (((mrel @ '#shoot') @ V) @ U)) => (((mrel @ '#shoot') @ W) @ U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(alive_decl, type, alive: (mworld > $o)).
thf(loaded_decl, type, loaded: (mworld > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(i_always_load_1, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ loaded) @ W) => (((mbox @ '#load') @ loaded) @ W)))))).
thf(i_always_load_2, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ (^ [W:mworld]: ((~ ((loaded @ W)))))) @ W) => (((mbox @ '#load') @ (^ [W:mworld]: ((~ ((loaded @ W)))))) @ W)))))).
thf(i_always_alive_1, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ alive) @ W) => (((mbox @ '#load') @ alive) @ W)))))).
thf(i_always_alive_2, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ (^ [W:mworld]: ((~ ((alive @ W)))))) @ W) => (((mbox @ '#load') @ (^ [W:mworld]: ((~ ((alive @ W)))))) @ W)))))).
thf(i_always_load_1_0, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ loaded) @ W) => (((mbox @ '#shoot') @ loaded) @ W)))))).
thf(i_always_load_2_0, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ (^ [W:mworld]: ((~ ((loaded @ W)))))) @ W) => (((mbox @ '#shoot') @ (^ [W:mworld]: ((~ ((loaded @ W)))))) @ W)))))).
thf(i_always_alive_1_0, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ alive) @ W) => (((mbox @ '#shoot') @ alive) @ W)))))).
thf(i_always_alive_2_0, axiom, (mlocal @ (^ [W:mworld]: (((((mbox @ '#always') @ (^ [W:mworld]: ((~ ((alive @ W)))))) @ W) => (((mbox @ '#shoot') @ (^ [W:mworld]: ((~ ((alive @ W)))))) @ W)))))).
thf(axiom_1, axiom, (mlocal @ ((mbox @ '#always') @ ((mbox @ '#load') @ loaded)))).
thf(axiom_2, axiom, (mlocal @ ((mbox @ '#always') @ (^ [W:mworld]: (((loaded @ W) => (((mbox @ '#shoot') @ (^ [W:mworld]: ((~ ((alive @ W)))))) @ W))))))).
thf(conj, conjecture, (mlocal @ ((mbox @ '#load') @ ((mbox @ '#shoot') @ (^ [W:mworld]: ((~ ((alive @ W))))))))).

%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:57 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mindex_type, type, mindex: $tType).
thf(mrel_decl, type, mrel: (mindex > (mworld > (mworld > $o)))).
thf('#c_decl', type, '#c': mindex).
thf('#u_decl', type, '#u': mindex).
thf(mbox_decl, type, mbox: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mbox_def, definition, (mbox = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: (((((mrel @ R) @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mdia_def, definition, (mdia = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: (((((mrel @ R) @ W) @ V) & (Phi @ V)))))))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
thf('mrel_#c_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#c') @ W) @ W)))).
thf('mrel_#c_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#c') @ W) @ V) & (((mrel @ '#c') @ V) @ U)) => (((mrel @ '#c') @ W) @ U))))).
thf('mrel_#u_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#u') @ W) @ W)))).
thf('mrel_#u_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#u') @ W) @ V) & (((mrel @ '#u') @ V) @ U)) => (((mrel @ '#u') @ W) @ U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(charge_decl, type, charge: (mworld > $o)).
thf(called_decl, type, called: (mworld > $o)).
thf(paid_decl, type, paid: (mworld > $o)).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(aciom_paid_charge, axiom, (mlocal @ (^ [W:mworld]: (((paid @ W) => (called @ W)))))).
thf(axiom_charge_u, axiom, (mlocal @ (^ [W:mworld]: (((charge @ W) => ((^ [W:mworld]: (((((mbox @ '#u') @ charge) @ W) & (((mbox @ '#c') @ charge) @ W)))) @ W)))))).
thf(axiom_1, axiom, (mlocal @ ((mbox @ '#u') @ (^ [W:mworld]: (((called @ W) => (((mbox @ '#c') @ called) @ W))))))).
thf(axiom_2, axiom, (mlocal @ ((mbox @ '#c') @ (^ [W:mworld]: (((paid @ W) => (((mbox @ '#u') @ paid) @ W))))))).
thf(axiom_3, axiom, (mlocal @ (^ [W:mworld]: ((((^ [W:mworld]: ((~ ((((mbox @ '#c') @ called) @ W))))) @ W) => (((mbox @ '#u') @ (^ [W:mworld]: ((~ ((((mbox @ '#c') @ called) @ W)))))) @ W)))))).
thf(axiom_4, axiom, (mlocal @ (^ [W:mworld]: ((((^ [W:mworld]: ((~ ((((mbox @ '#u') @ paid) @ W))))) @ W) => (((mbox @ '#c') @ (^ [W:mworld]: ((~ ((((mbox @ '#u') @ paid) @ W)))))) @ W)))))).
thf(requirement_1, conjecture, (mlocal @ (^ [W:mworld]: ((((^ [W:mworld]: ((~ (((^ [W:mworld]: ((((^ [W:mworld]: (((called @ W) & ((^ [W:mworld]: ((~ ((paid @ W))))) @ W)))) @ W) => (charge @ W)))) @ W))))) @ W) => (((mbox @ '#c') @ (^ [W:mworld]: ((~ (((^ [W:mworld]: ((((^ [W:mworld]: (((called @ W) & ((^ [W:mworld]: ((~ ((paid @ W))))) @ W)))) @ W) => (charge @ W)))) @ W)))))) @ W)))))).

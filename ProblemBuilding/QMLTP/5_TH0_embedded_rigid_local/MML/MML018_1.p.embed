%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:26:57 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(s4_cumulative_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($cumulative),($modalities) == ($modal_system_S4),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mindex_type, type, mindex: $tType).
thf(mrel_decl, type, mrel: (mindex > (mworld > (mworld > $o)))).
thf('#bank_decl', type, '#bank': mindex).
thf('#t_decl', type, '#t': mindex).
thf('#cr_decl', type, '#cr': mindex).
thf(mbox_decl, type, mbox: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mbox_def, definition, (mbox = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: (((((mrel @ R) @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mdia_def, definition, (mdia = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: (((((mrel @ R) @ W) @ V) & (Phi @ V)))))))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
thf('mrel_#bank_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#bank') @ W) @ W)))).
thf('mrel_#bank_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#bank') @ W) @ V) & (((mrel @ '#bank') @ V) @ U)) => (((mrel @ '#bank') @ W) @ U))))).
thf('mrel_#t_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#t') @ W) @ W)))).
thf('mrel_#t_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#t') @ W) @ V) & (((mrel @ '#t') @ V) @ U)) => (((mrel @ '#t') @ W) @ U))))).
thf('mrel_#cr_reflexive', axiom, (! [W:mworld]: ((((mrel @ '#cr') @ W) @ W)))).
thf('mrel_#cr_transitive', axiom, (! [W:mworld,V:mworld,U:mworld]: ((((((mrel @ '#cr') @ W) @ V) & (((mrel @ '#cr') @ V) @ U)) => (((mrel @ '#cr') @ W) @ U))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(p_decl, type, p: $i).
thf(fortytwo_decl, type, fortytwo: $i).
thf(balance_decl, type, balance: (mworld > ($i > ($i > $o)))).
thf(account_decl, type, account: (mworld > ($i > ($i > $o)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
thf(eiw_di_decl, type, eiw_di: ($i > (mworld > $o))).
thf(eiw_di_nonempty, axiom, (! [W:mworld]: ((? [X:$i]: (((eiw_di @ X) @ W)))))).
thf(eiw_di_cumul, axiom, (! [Index:mindex,W:mworld,V:mworld,X:$i]: (((((eiw_di @ X) @ W) & (((mrel @ Index) @ W) @ V)) => ((eiw_di @ X) @ V))))).
thf(eiw_p_mono, axiom, (! [W:mworld]: (((eiw_di @ p) @ W)))).
thf(eiw_fortytwo_mono, axiom, (! [W:mworld]: (((eiw_di @ fortytwo) @ W)))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(axiom_1, axiom, (mlocal @ ((mbox @ '#bank') @ (^ [W:mworld]: ((! [X:$i]: ((((eiw_di @ X) @ W) => (((mbox @ '#cr') @ (^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((account @ W) @ ((^ [W:mworld]: (p)) @ W)))) @ W) @ ((^ [W:mworld]: (X)) @ W)))) @ W) => ((^ [W:mworld]: ((? [B:$i]: ((((eiw_di @ B) @ W) & (((mbox @ '#t') @ (^ [W:mworld]: ((((^ [W:mworld]: (((balance @ W) @ ((^ [W:mworld]: (p)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W))))) @ W)))))) @ W))))) @ W))))))))).
thf(axiom_1_0, axiom, (mlocal @ ((mbox @ '#cr') @ (^ [W:mworld]: ((((^ [W:mworld]: (((account @ W) @ ((^ [W:mworld]: (p)) @ W)))) @ W) @ ((^ [W:mworld]: (fortytwo)) @ W))))))).
thf(con, conjecture, (mlocal @ (^ [W:mworld]: ((? [B:$i]: ((((eiw_di @ B) @ W) & (((mbox @ '#t') @ (^ [W:mworld]: ((((^ [W:mworld]: (((balance @ W) @ ((^ [W:mworld]: (p)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W))))) @ W)))))))).

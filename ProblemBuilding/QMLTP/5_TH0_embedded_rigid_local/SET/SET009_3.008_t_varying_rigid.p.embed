%%% This output was generated by embedproblem, version 1.8.4 (library version 1.8).
%%% Generated on Tue Feb 13 18:09:26 CET 2024
%%% using '$modal' embedding, version 2.2.2.
%%% Logic specification used:
%%% tff(t_varying_rigid, logic, ($modal) == ([($designation) == ($rigid),($domains) == ($varying),($modalities) == ($modal_system_T),($terms) == ($local)])).
%%% Transformation parameters: FORCE_HIGHERORDER

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta-logical definitions of the embedding %%
thf(mworld_type, type, mworld: $tType).
thf(mrel_decl, type, mrel: (mworld > (mworld > $o))).
thf(mbox_decl, type, mbox: ((mworld > $o) > (mworld > $o))).
thf(mbox_def, definition, (mbox = (^ [Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: ((((mrel @ W) @ V) => (Phi @ V)))))))).
thf(mdia_decl, type, mdia: ((mworld > $o) > (mworld > $o))).
thf(mdia_def, definition, (mdia = (^ [Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: ((((mrel @ W) @ V) & (Phi @ V)))))))).
thf(mrel_reflexive, axiom, (! [W:mworld]: (((mrel @ W) @ W)))).
thf(mactual_decl, type, mactual: mworld).
thf(mlocal_decl, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted user type declarations %%%%%%%%%%%
thf(member_decl, type, member: (mworld > ($i > ($i > $o)))).
thf(subset_decl, type, subset: (mworld > ($i > ($i > $o)))).
thf(difference_decl, type, difference: ($i > ($i > $i))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional meta-logical definitions %%%%%%%%
thf(eiw_di_decl, type, eiw_di: ($i > (mworld > $o))).
thf(eiw_di_nonempty, axiom, (! [W:mworld]: ((? [X:$i]: (((eiw_di @ X) @ W)))))).
thf(eiw_difference_mono, axiom, (! [W:mworld,X0:$i,X1:$i]: ((((eiw_di @ X0) @ W) => (((eiw_di @ X1) @ W) => ((eiw_di @ ((difference @ X0) @ X1)) @ W)))))).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Converted problem %%%%%%%%%%%%%%%%%%%%%%%%%%
thf(difference_defn, axiom, (mlocal @ (^ [W:mworld]: ((! [B:$i]: ((((eiw_di @ B) @ W) => (! [C:$i]: ((((eiw_di @ C) @ W) => (! [D:$i]: ((((eiw_di @ D) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((member @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (difference)) @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W)))) @ W) <=> ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((member @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) & ((^ [W:mworld]: ((~ (((^ [W:mworld]: ((((^ [W:mworld]: (((member @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W))))) @ W)))) @ W)))) @ W)))))))))))))).
thf(subset_defn, axiom, (mlocal @ (^ [W:mworld]: ((! [B:$i]: ((((eiw_di @ B) @ W) => (! [C:$i]: ((((eiw_di @ C) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((subset @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W) <=> ((^ [W:mworld]: ((! [D:$i]: ((((eiw_di @ D) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((member @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: (((member @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W)))) @ W)))))) @ W)))) @ W))))))))))).
thf(reflexivity_of_subset, axiom, (mlocal @ (^ [W:mworld]: ((! [B:$i]: ((((eiw_di @ B) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: (((subset @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W)))))))).
thf(prove_subset_difference, conjecture, (mlocal @ (^ [W:mworld]: ((! [B:$i]: ((((eiw_di @ B) @ W) => (! [C:$i]: ((((eiw_di @ C) @ W) => (! [D:$i]: ((((eiw_di @ D) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (((subset @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W) => ((^ [W:mworld]: ((((^ [W:mworld]: (((subset @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (difference)) @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (C)) @ W)))) @ W)))) @ W) @ ((^ [W:mworld]: ((((^ [W:mworld]: ((((^ [W:mworld]: (difference)) @ W) @ ((^ [W:mworld]: (D)) @ W)))) @ W) @ ((^ [W:mworld]: (B)) @ W)))) @ W)))) @ W)))) @ W)))))))))))))).

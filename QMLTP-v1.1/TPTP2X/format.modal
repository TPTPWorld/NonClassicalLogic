%======================================================================
%----This transforms TPTP problem formulae in intuitionistic logic J
%----into problem formulae in modal logic S4, in extended TPTP format
%----(with #box, #dia as modalities) using Goedels Translation.
%----Problems without conjecture are negated.
%----
%----Written by Jens Otten, November 2000
%----Extended to handle first-order: Jens Otten, June 2004
%----Modified to work with TPTP 3.x: Thomas Raths, November 2005
%======================================================================

%% Author:  Jens Otten, Thomas Raths
%% Date: 30/10/2006

:-set_flag(print_depth,1000). %%% for eclipse Prolog

%----------------------------------------------------------------------
%----Print out a literal with '-' for negative, nothing for positive.
%----Use positive representation

output_modal_signed_literal(--('$tptp_equal'(X,Y))) :-
    !, write(' (equal('), write(X), write(' , '), write(Y), write('))').

output_modal_signed_literal(--('$tptp_not_equal'(X,Y))) :-
    !, write(' - (equal('), write(X), write(' , '), write(Y), write('))').

output_modal_signed_literal(++('$tptp_equal'(X,Y))) :-
    !, write(' - (equal('), write(X), write(' , '), write(Y), write('))').

output_modal_signed_literal(++('$tptp_not_equal'(X,Y))) :-
    !, write(' (equal('), write(X), write(' , '), write(Y), write('))').

output_modal_signed_literal(--Atom) :-
    !, write(' '), write(Atom).

output_modal_signed_literal(++Atom) :-
    write('-'), write(Atom).

%----------------------------------------------------------------------
%----Print out the literals of a clause in modal format.
%----Special case of an empty clause

output_modal_literals([]):-
    write('[]').

output_modal_literals([OneLiteral]):-
    !, output_modal_signed_literal(OneLiteral).

output_modal_literals([FirstLiteral|RestOfLiterals]):-
    output_modal_signed_literal(FirstLiteral),
    write('  ,'), nl, write(' '),
    output_modal_literals(RestOfLiterals).

%----------------------------------------------------------------------
%----Print out the clauses in modal format.

output_modal_clauses([]).

%%% for TPTP-v3.1.0 or later:
%%% if clause = $true (or -($false)), then ignore it
%%% if clause = $false (or -($true)), then clause set is valid and
%%%  the clauses [truexxx] and [-(truexxx)] are added
%%% for TPTP-v3.2.0: '$true', '$false'; for TPTP-v3.1.0: $true, $false

output_modal_clauses([cnf(_Name,_Status,[Literal])|RestOfClauses]) :-
    (Literal = ++('$true'); 
     Literal = ++($true);
     Literal = --('$false');
     Literal = --($false)), !,
    output_modal_clauses(RestOfClauses).

output_modal_clauses([cnf(Name,Status,[Literal])|RestOfClauses]) :-
    (Literal = ++('$false'); 
     Literal = ++($false);
     Literal = --('$true');
     Literal = --($true)), !,
    write('% '), write(Name), write(', '),
    write(Status), write('.'), nl,
    write('[truexxx], [-(truexxx)]'),
    (RestOfClauses\==[] ->
        (nl, nl, write('  ,'), nl, nl);
         true),
    output_modal_clauses(RestOfClauses).

output_modal_clauses([cnf(Name,Status,Literals)|RestOfClauses]) :-
    write('% '), write(Name), write(', '),
    write(Status), write('.'), nl,
    write('['),
    output_modal_literals(Literals),
    write(']'),
    (RestOfClauses\==[] ->
        (nl, nl, write('  ,'), nl, nl);
         true),
    output_modal_clauses(RestOfClauses).

%%% for TPTP-v2.7.0 or earlier:
output_modal_clauses([input_clause(Name,Status,Literals)|RestOfClauses]) :-
    output_modal_clauses([cnf(Name,Status,Literals)|RestOfClauses]).

%----------------------------------------------------------------------
%----Print the list of input clauses as a formula in modal format.

output_modal_formula([]) :-
    !.

output_modal_formula(Clauses) :-
    nl,
    write('f(['), nl, nl,
    output_modal_clauses(Clauses), nl, nl,
    write(']).'), nl, nl.

%----------------------------------------------------------------------
%----Print out the connectives, quantifiers, and literals of a formula
%----in modal format.

output_modal_qmf((~ A)) :-
    !, write('( #box : (~ '), output_modal_qmf(A), write(' ))').
output_modal_qmf('|'(A,B)) :-
    !, write('( '), output_modal_qmf(A), write(' | '),
    output_modal_qmf(B), write(' )').
output_modal_qmf((A;B)) :-
    !, write('( '), output_modal_qmf(A), write(' | '),
    output_modal_qmf(B), write(' )').
output_modal_qmf((A & B)) :-
    !, write('( '), output_modal_qmf(A), write(' & '),
    output_modal_qmf(B), write(' )').
output_modal_qmf((A => B)) :-
    !, write('( #box : ('), output_modal_qmf(A), write(' => '),
    output_modal_qmf(B), write(' ))').
output_modal_qmf((A <=> B)) :-
    !, write('(( #box : ('), output_modal_qmf(A), write(' => '), 
    output_modal_qmf(B), write(' )) & (#box : ('),
    output_modal_qmf(B), write(' => '), output_modal_qmf(A), 
    write(' )))').

output_modal_qmf((! [] : A)) :- 
    !, output_modal_qmf(A).

output_modal_qmf((! [V|L] : A)) :- 
    !, write('( #box : ( ! ['), print(V), write('] : '), 
    output_modal_qmf(! L : A), write('))').

output_modal_qmf((? L : A)):- 
    !, write('( ? '), print(L), write(' : '), 
    output_modal_qmf(A), write(')').

output_modal_qmf('$true')  :- !, write('$true').
output_modal_qmf($true)    :- !, write('$true').
output_modal_qmf('$false') :- !, write('$false').
output_modal_qmf($false) :- !, write('$false').
output_modal_qmf('$tptp_equal'(X,Y)) :-
     !, write('(#box : ('), write(X), write(' = '), write(Y), write('))').
     % !, write(X), write(' = '), write(Y).
     %!, write('(#box : (equal('), write(X), write(','), write(Y), write(')))').
output_modal_qmf('$tptp_not_equal'(X,Y)) :-
     !, write('(#box : (~ (#box: ('), write(X), write(' = '), write(Y), write('))))').
    % !, write(X), write(' != '), write(Y).
    % !, write('(#box : (~ (#box : (equal('), write(X), write(','), write(Y), write(')))))').
output_modal_qmf(Atom) :- write('( #box : ('), print(Atom), write('))').

%----------------------------------------------------------------------
%----Print out the formulae in modal format.
output_modal_fo_formulae([]).

output_modal_fo_formulae([qmf(Name,Status,Formula)|RestOfFormulae]) :-
    write('qmf('), write(Name), write(','), write(Status), write(','), nl,
    output_modal_qmf(Formula), write(').'), nl, nl,
    output_modal_fo_formulae(RestOfFormulae).

%%% for TPTP-v2.7.0 or earlier:
output_modal_fo_formulae([input_formula(Name,Status,Fml)|RestOfFml]) :-
    output_modal_fo_formulae([qmf(Name,Status,Fml)|RestOfFml]).

%----------------------------------------------------------------------
%----Print out the list of input formulae as a first-order formula in
%----modal format.

output_modal_fo_formula([]) :-
    !.

output_modal_fo_formula(Formulae) :-
    output_modal_fo_formulae(Formulae).

%----------------------------------------------------------------------
%----Print out all the clauses in modal format.

modal(modal,Clauses,_) :-
    tptp_clauses(Clauses),
    output_modal_formula(Clauses).

%----------------------------------------------------------------------
%----Print out first-order formula in modal format.

modal(modal,Formulae,_) :-
    tptp_formulae(Formulae),
    output_modal_fo_formula(Formulae).

%----------------------------------------------------------------------
%----Provide information about the modal format.
modal_format_information('%','.modal').
%----------------------------------------------------------------------
%----Provide information about the TPTP file.
modal_file_information(format,modal).
%----------------------------------------------------------------------

%======================================================================
%----This outputs QMLTP problem formulae in a format
%----acceptable to the MleanCoP system [www.leancop.de].
%----Problems without conjecture are negated.
%----
%----Written by Jens Otten, November 2000
%----Extended to handle first-order: Jens Otten, June 2004
%----Modified to work with TPTP 3.x: Thomas Raths, November 2005
%----Extended to modal logic: Thomas Raths, July 2009
%----
%----Example: ./tptp2X -f mleancop -t stdfof Problems/*/*
%======================================================================

:-set_flag(print_depth,1000).  %%% for ECLiPSe Prolog

%----Print out the connectives, quantifiers, and literals of a formula
%----in MleanCoP format.

output_mleancop_qmf((~ A)) :-
    !, write('(~ '), output_mleancop_qmf(A), write(' )').
output_mleancop_qmf('|'(A,B)) :-
    !, write('( '), output_mleancop_qmf(A), write(' ; '),
    output_mleancop_qmf(B), write(' )').
output_mleancop_qmf((A;B)) :-
    !, write('( '), output_mleancop_qmf(A), write(' ; '),
    output_mleancop_qmf(B), write(' )').
output_mleancop_qmf((A & B)) :-
    !, write('( '), output_mleancop_qmf(A), write(' , '),
    output_mleancop_qmf(B), write(' )').
output_mleancop_qmf((A => B)) :-
    !, write('( '), output_mleancop_qmf(A), write(' => '),
    output_mleancop_qmf(B), write(' )').
output_mleancop_qmf((A <=> B)) :-
    !, write('( '), output_mleancop_qmf(A), write(' <=> '),
    output_mleancop_qmf(B), write(' )').
output_mleancop_qmf((! [] : A)) :- !, output_mleancop_qmf(A).
output_mleancop_qmf((! [V|L] : A)) :-
    !, write('(all '), print(V), write(' : '),
    output_mleancop_qmf(! L : A), write(')').
output_mleancop_qmf((? [] : A)):- !, output_mleancop_qmf(A).
output_mleancop_qmf((? [V|L] : A)) :-
    !, write('(ex '), print(V), write(' : '),
    output_mleancop_qmf(? L : A), write(')').
output_mleancop_qmf((#box : A)) :-
    !, write('(# '), output_mleancop_qmf(A), write(')').
output_mleancop_qmf((#dia : A)) :-
    !, write('(* '), output_mleancop_qmf(A), write(')').
output_mleancop_qmf('$true')  :- !, write('(true___=>true___)').
output_mleancop_qmf($true)    :- !, write('(true___=>true___)').
output_mleancop_qmf('$false') :- !, write('(false___ , ~ false___)').
output_mleancop_qmf($false) :- !, write('(false___ , ~ false___)').
output_mleancop_qmf('$tptp_equal'(X,Y)) :-
    !, write('(equal('), write(X), write(','), write(Y), write('))').
output_mleancop_qmf('$tptp_not_equal'(X,Y)) :-
    !,  write('(~ (equal('), write(X), write(','), write(Y), write(')))').
output_mleancop_qmf(Atom) :- print(Atom).

%----------------------------------------------------------------------
%----Print out the formulae in MleanCoP format.

output_mleancop_fo_formulae([]).

output_mleancop_fo_formulae([qmf(Name,Status,Formula)|RestOfFormulae]) :-
    (Status==conjecture, RestOfFormulae \= []) -> 
      (append(RestOfFormulae,[qmf(Name,Status,Formula)],Formulae),
       output_mleancop_fo_formulae(Formulae)) ;
      (write('% '), write(Name), write(', '), write(Status), write('.'), nl,
       write(''), output_mleancop_qmf(Formula), write(''),
       (RestOfFormulae == [] -> true;
        (((RestOfFormulae=[qmf(_,conjecture,_)] ->
           (nl, nl, write('  =>'), nl, nl));
           (nl, nl, write('  ,'), nl, nl)),
         output_mleancop_fo_formulae(RestOfFormulae)))).

%%% for TPTP-v2.7.0 or earlier:
output_mleancop_fo_formulae([input_formula(Name,Status,Fml)|RestOfFml]) :-
    output_mleancop_fo_formulae([qmf(Name,Status,Fml)|RestOfFml]).

%----------------------------------------------------------------------
%----Print out the list of input formulae as a first-order formula in
%----MleanCoP format.

output_mleancop_fo_formula([]) :-
    !.

output_mleancop_fo_formula(Formulae) :-
    write('f(('), nl,
    (Formulae = [qmf(_,conjecture,_)] -> true; (write('('), nl)),
    %%% negate problems without conjecture
    (\+ (member(qmf(_,conjecture,_),Formulae);
         member(input_formula(_,conjecture,_),Formulae)) ->
           (write('~ ('), nl) ; true), %%%
    output_mleancop_fo_formulae(Formulae), nl, nl,
    (\+ (member(qmf(_,conjecture,_),Formulae);
         member(input_formula(_,conjecture,_),Formulae)) ->
           (write(')'), nl); true),
    (Formulae = [qmf(_,conjecture,_)] -> true; (write(')'), nl)),
    write(')).'), nl, nl.

%----------------------------------------------------------------------
%----Print out first-order formula in MleanCoP format.

mleancop(mleancop,Formulae,_) :-
    tptp_formulae(Formulae),
    output_mleancop_fo_formula(Formulae).

%----------------------------------------------------------------------
%----Provide information about the MleanCoP format.
mleancop_format_information('%','.mleancop').
%----------------------------------------------------------------------
%----Provide information about the TPTP file.
mleancop_file_information(format,mleancop).
%----------------------------------------------------------------------

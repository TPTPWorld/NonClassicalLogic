%======================================================================
%----This outputs QMLTP problem formulae in a format
%----acceptable to the modleantap system [www.leancop.de].
%----Problems without conjecture are negated.
%----
%----Written by Jens Otten, November 2000
%----Extended to handle first-order: Jens Otten, June 2004
%----Modified to work with TPTP 3.x: Thomas Raths, November 2005
%======================================================================

%%% Modified Thomas Raths for modal logic, July 2009
%%% do not use "shorten" in -t option!
%%% ./tptp2X -f modleantap -t add_equality ../Problems/*/*

:-set_flag(print_depth,1000). %%% for eclipse Prolog

%----Print out the connectives, quantifiers, and literals of a formula
%----in modleantap format.

output_modleantap_qmf((~ A)) :-
    !, write('(- '), output_modleantap_qmf(A), write(' )').
output_modleantap_qmf('|'(A,B)) :-
    !, write('( '), output_modleantap_qmf(A), write(' v '),
    output_modleantap_qmf(B), write(')').
output_modleantap_qmf((A;B)) :-
    !, write('( '), output_modleantap_qmf(A), write(' v '),
    output_modleantap_qmf(B), write(')').
output_modleantap_qmf((A & B)) :-
    !, write('( '), output_modleantap_qmf(A), write(' & '),
    output_modleantap_qmf(B), write(')').
output_modleantap_qmf((A => B)) :-
    !, write('( '), output_modleantap_qmf(A), write(' => '),
    output_modleantap_qmf(B), write(')').
output_modleantap_qmf((A <=> B)) :-
    !, write('( '), output_modleantap_qmf(A), write(' <=> '),
    output_modleantap_qmf(B), write(')').
output_modleantap_qmf((! [] : A)) :- !, output_modleantap_qmf(A).
output_modleantap_qmf((! [V|L] : A)) :-
    !, write('(all '), print(V), write(' : '),
    output_modleantap_qmf(! L : A), write(')').
output_modleantap_qmf((? [] : A)):- !, output_modleantap_qmf(A).
output_modleantap_qmf((? [V|L] : A)) :-
    !, write('(ex '), print(V), write(' : '),
    output_modleantap_qmf(? L : A), write(')').
%%%
output_modleantap_qmf((#box : A)) :-
    !, write('(box '), output_modleantap_qmf(A), write(')').
output_modleantap_qmf((#dia : A)) :-
    !, write('(dia '), output_modleantap_qmf(A), write(')').
output_modleantap_qmf('$true')  :- !, write('(true___=>true___)').
output_modleantap_qmf($true)    :- !, write('(true___=>true___)').
output_modleantap_qmf('$false') :- !, write('(false___ , ~ false___)').
output_modleantap_qmf($false) :- !, write('(false___ , ~ false___)').
output_modleantap_qmf('$tptp_equal'(X,Y)) :-
    !, write('(equal('), write(X), write(','), write(Y), write('))').
output_modleantap_qmf('$tptp_not_equal'(X,Y)) :-
    !,  write('(~ (equal('), write(X), write(','), write(Y), write(')))').
output_modleantap_qmf(Atom) :- print(Atom).

%----------------------------------------------------------------------
%----Print out the formulae in modleantap format.
output_modleantap_fo_formulae([]).

output_modleantap_fo_formulae([qmf(Name,Status,Formula)|RestOfFormulae]) :-
    (Status==conjecture, RestOfFormulae \= []) -> 
      (append(RestOfFormulae,[qmf(Name,Status,Formula)],Formulae),
       output_modleantap_fo_formulae(Formulae)) ;
      (write('% '), write(Name), write(', '), write(Status), write('.'), nl,
       write(''), output_modleantap_qmf(Formula), write(''),
       (RestOfFormulae == [] -> true;
        (((RestOfFormulae=[qmf(_,conjecture,_)] ->
           (nl, nl, write('  =>'), nl, nl));
           (nl, nl, write('  &'), nl, nl)),
         output_modleantap_fo_formulae(RestOfFormulae)))).

%%% for TPTP-v2.7.0 or earlier:
output_modleantap_fo_formulae([input_formula(Name,Status,Fml)|RestOfFml]) :-
    output_modleantap_fo_formulae([qmf(Name,Status,Fml)|RestOfFml]).

%----------------------------------------------------------------------
%----Print out the list of input formulae as a first-order formula in
%----modleantap format.

output_modleantap_fo_formula([]) :-
    !.

output_modleantap_fo_formula(Formulae) :-
    write('f(('), nl,
    % (Formulae = [qmf(_,conjecture,_)] -> true; (write('# ('), nl)), % for goedelised problems
    (Formulae = [qmf(_,conjecture,_)] -> true; (write('('), nl)),
    %%% negate problems without conjecture
    (\+ (member(qmf(_,conjecture,_),Formulae);
         member(input_formula(_,conjecture,_),Formulae)) ->
           (write('- ('), nl) ; true), %%%
    output_modleantap_fo_formulae(Formulae), nl, nl,
    (\+ (member(qmf(_,conjecture,_),Formulae);
         member(input_formula(_,conjecture,_),Formulae)) ->
           (write(')'), nl); true),
    (Formulae = [qmf(_,conjecture,_)] -> true; (write(')'), nl)),
    write(')).'), nl, nl.

%----------------------------------------------------------------------
%----Print out all the clauses in modleantap format.

modleantap(modleantap,Clauses,_) :-
    tptp_clauses(Clauses),
    output_modleantap_formula(Clauses).

%----------------------------------------------------------------------
%----Print out first-order formula in modleantap format.

modleantap(modleantap,Formulae,_) :-
    tptp_formulae(Formulae),
    output_modleantap_fo_formula(Formulae).

%----------------------------------------------------------------------
%----Provide information about the modleantap format.
modleantap_format_information('%','.modleantap').
%----------------------------------------------------------------------
%----Provide information about the TPTP file.
modleantap_file_information(format,modleantap).
%----------------------------------------------------------------------

%======================================================================
%----This outputs QMLTP problem formulae to the TPTP THF format
%----using the embedding of quantified multimodal logic in simple type 
%----theory by Chris Benzmueller (2009).
%----Problems without conjecture are negated.
%----
%----Written by Thomas Raths, January 2010
%======================================================================

%%% do not use "shorten" in -t option!
%%% ./tptp2X -f thf -t add_equality ../Problems/*/*

:-set_flag(print_depth,1000). %%% for eclipse Prolog

%----Print out the connectives, quantifiers, and literals of a formula
%----in thf format.

output_thf_qmf((~ A)) :-
    !, write('( mnot @ '), output_thf_qmf(A), write(' )').
output_thf_qmf('|'(A,B)) :-
    !, write('( mor @ '), output_thf_qmf(A), write(' @ '),
    output_thf_qmf(B), write(' )').
output_thf_qmf((A;B)) :-
    !, write('( mor @ '), output_thf_qmf(A), write(' @ '),
    output_thf_qmf(B), write(' )').
output_thf_qmf((A & B)) :-
    !, write('( mand @ '), output_thf_qmf(A), write(' @ '),
    output_thf_qmf(B), write(' )').
output_thf_qmf((A => B)) :-
    !, write('( mimplies @ '), output_thf_qmf(A), write(' @ '),
    output_thf_qmf(B), write(' )').
output_thf_qmf((A <=> B)) :-
    !, write('( mequiv @ '), output_thf_qmf(A), write(' @ '),
    output_thf_qmf(B), write(' )').
output_thf_qmf((! [] : A)) :- !, output_thf_qmf(A).
output_thf_qmf((! [V|L] : A)) :-
    !, write('( mforall_ind @ ^ ['), print(V), write(': mu] : '),
    output_thf_qmf(! L : A), write(' )').
output_thf_qmf((? [] : A)):- !, output_thf_qmf(A).
output_thf_qmf((? [V|L] : A)) :-
    !, write('( mexists_ind @ ^ ['), print(V), write(': mu] : '),
    output_thf_qmf(? L : A), write(')').
output_thf_qmf((#box : A)) :-
    !, write('( mbox_'),
    mlogic(Logic),
    (Logic == 't' -> write('m'); write(Logic)), 
    write(' @ '), output_thf_qmf(A), write(' )').
output_thf_qmf((#dia : A)) :-
    !, write('( mdia_'),
    mlogic(Logic),
    (Logic == 't' -> write('m'); write(Logic)), 
    write(' @ '), output_thf_qmf(A), write(' )').
output_thf_qmf('$true')  :- !, write(' mtrue ').
output_thf_qmf($true)    :- !, write(' mtrue ').
output_thf_qmf('$false') :- !, write(' mfalse ').
output_thf_qmf($false) :- !, write(' mfalse ').
output_thf_qmf('$tptp_equal'(X,Y)) :-
    !, write('( meq_ind @ '), output_thf_qmf(X), write(' @ '), 
    output_thf_qmf(Y), write(' )').
output_thf_qmf('$tptp_not_equal'(X,Y)) :-
    !, write('( mnot @ ( meq_ind @ '), output_thf_qmf(X), write(' @ '), 
    output_thf_qmf(Y), write(' ))').
output_thf_qmf(Term) :- 
    atom(Term) -> write(Term); % constants, variables
    write('( '), Term =.. [H|R], write(H), output_thf_term(R), write(' )').

output_thf_term([]).
output_thf_term([H|T]) :- write(' @ '), output_thf_qmf(H), output_thf_term(T).

%----------------------------------------------------------------------
%----Print out the formulae in thf format.
output_thf_formulae([qmf(Name,conjecture,Formula)]) :- !, 
  write('thf('), write(Name), write(',conjecture, ( mvalid @ '), nl, write('   '), output_thf_qmf(Formula), write(')).').

output_thf_formulae(Formulae) :- 
    delete1(qmf(Name,conjecture,Conjecture),Formulae,Axioms) -> 
      output_thf_axioms(Axioms), 
      write('thf('), write(Name), write(',conjecture, ( mvalid @ '), nl, write('   '),   
      output_thf_qmf(Conjecture),
      write(')).');
    output_thf_axioms(Formulae).

output_thf_axioms([]) :- !. 

output_thf_axioms([qmf(Name,Status,Formula)|RestOfFormulae]) :-
    write('thf('), write(Name), write(','), write(Status), write(', ( mvalid @ '), nl, write('   '),
    output_thf_qmf(Formula),
    write(')).'), nl, nl,
    output_thf_axioms(RestOfFormulae).

%----Print out type information
output_type(Formulae) :-
    get_type(Formulae,[],PropositionalConstants,[],PredicateSymbols,[],FunctionSymbols),
    remove_duplicates(PropositionalConstants,C),
    remove_duplicates(PredicateSymbols,P),
    remove_duplicates(FunctionSymbols,F),
    output_type_prop(C),
    output_type_pred(P),
    output_type_funct(F).

get_type([],C,C,P,P,F,F).
get_type([qmf(_,_,H)|T],C1,C,P1,P,F1,F) :- get_type_qmf(H,[],C2,[],P2,[],F2), append(C1,C2,C3),
                                           append(P1,P2,P3), append(F1,F2,F3), get_type(T,C3,C,P3,P,F3,F). 

get_type_qmf((~ A),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C,P1,P,F1,F).
get_type_qmf('|'(A,B),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C2,P1,P2,F1,F2), get_type_qmf(B,C2,C,P2,P,F2,F).
get_type_qmf((A;B),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C2,P1,P2,F1,F2), get_type_qmf(B,C2,C,P2,P,F2,F).
get_type_qmf((A & B),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C2,P1,P2,F1,F2), get_type_qmf(B,C2,C,P2,P,F2,F).
get_type_qmf((A => B),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C2,P1,P2,F1,F2), get_type_qmf(B,C2,C,P2,P,F2,F).
get_type_qmf((A <=> B),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C2,P1,P2,F1,F2), get_type_qmf(B,C2,C,P2,P,F2,F).
get_type_qmf((! _L : A),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C,P1,P,F1,F).
get_type_qmf((? _L : A),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C,P1,P,F1,F).
get_type_qmf((#box : A),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C,P1,P,F1,F).
get_type_qmf((#dia : A),C1,C,P1,P,F1,F) :- !, get_type_qmf(A,C1,C,P1,P,F1,F).
get_type_qmf($true,C,C,P,P,F,F) :- !.
get_type_qmf('$true',C,C,P,P,F,F) :- !.
get_type_qmf($false,C,C,P,P,F,F) :- !.
get_type_qmf('$false',C,C,P,P,F,F) :- !.
get_type_qmf('$tptp_equal'(X,Y),C,C,P,P,F1,F) :- !, get_type_term(X,F1,F2), get_type_term(Y,F2,F).
get_type_qmf('$tptp_not_equal'(X,Y),C,C,P,P,F1,F) :- !, get_type_term(X,F1,F2), get_type_term(Y,F2,F).
get_type_qmf(A,C,[A|C],P,P,F,F) :- atom(A), !.

get_type_qmf(T,C,C,P1,[(H,L)|P1],F1,F) :- T =.. [H|R], length(R,L), get_type_termlist(R,F1,F).

get_type_term(T,P,P,F,F) :- var(T), !.  % this does not work for some reason
% recognise a variable as atom beginning with capital letter
get_type_term(T,F,F) :- atom(T), atom_codes(T,[C|_]), C>64, C<91, !.
get_type_term(T,F1,F) :- T =.. [H|R], length(R,L), get_type_termlist(R,[(H,L)|F1],F).

get_type_termlist([],F,F).
get_type_termlist([H|R],F1,F) :- get_type_term(H,F1,F2), get_type_termlist(R,F2,F).

output_type_prop([]).
output_type_prop([H|T]) :- write('thf('), write(H), write('_type,type,('), nl,
                           write('    '), write(H), write(': $i > $o )).'), nl, nl,
                           output_type_prop(T).

output_type_funct([]).
output_type_funct([(F,N)|T]) :- write('thf('), write(F), write('_type,type,('), nl,
                                write('    '), write(F), write(': '),
                                N1 is N + 1,
                                write_mu(N1),
                                write(' )).'), nl, nl,
                                ((mdomain(cumul) ; mdomain(vary)) -> 
                                 % for cumulative or varying domains
                                 (write('thf(existence_of_'), write(F),  
                                  write('_ax,axiom,( ! [V: $i] : ('),
                                  write_quant(N),
                                  write(' exists_in_world @ ('), write(F),
                                  write_funct(N),
                                  write(') @ V )))'), write_br(N), write('.'), nl, nl); true),
                                % 
                                output_type_funct(T).

output_type_pred([]).
output_type_pred([(P,N)|T]) :- write('thf('), write(P), write('_type,type,('), nl,
                               write('    '), write(P), write(': '),
                               write_mu(N), write(' > $i > $o'),
                               write(' )).'), nl, nl,
                               output_type_pred(T).

write_quant(0) :- !.
write_quant(N) :- write('! [V'), write(N), write(': mu] : ('), N1 is N-1, write_quant(N1).

write_funct(0) :- !.
write_funct(N) :- write(' @ '), write('V'), write(N), N1 is N-1, write_funct(N1).

write_br(0) :- !.
write_br(N) :- write(')'), N1 is N-1, write_br(N1).

write_mu(N) :- N =< 1, !, write('mu').
write_mu(N) :- write('mu > '), N1 is N-1, write_mu(N1).

%----------------------------------------------------------------------
member1(X,[H|_]) :- X==H,!.
member1(X,[_|T]) :- member1(X,T).
 
remove_duplicates([],[]).
remove_duplicates([H|T],C) :- member1(H,T),!, remove_duplicates(T,C).
remove_duplicates([H|T],[H|C]) :- remove_duplicates(T,C).

delete1(H, [H|R], R):- !.
delete1(H, [Y|R], [Y|D]) :- delete1(H,R,D).

%----------------------------------------------------------------------
%----Print out first-order formula in thf format.

thf(THF,Formulae,_) :-
  tptp_formulae(Formulae),
 (THF == thf -> (Logic = 's4', Domain = 'const');
   THF = (thf : B) -> (B = (Logic:Domain); (B = Logic, Domain = 'const'))),
   (Logic == 'k' -> LogicWritten = 'K';
    Logic == 'k4' -> LogicWritten = 'K4';
    Logic == 'd' -> LogicWritten = 'D';
    Logic == 'd4' -> LogicWritten = 'D4';
    Logic == 't' -> LogicWritten = 'T';
    Logic == 'm' -> LogicWritten = 'M';
    Logic == 'b' -> LogicWritten = 'B';
    Logic == 's4' -> LogicWritten = 'S4';
    Logic == 's5' -> LogicWritten = 'S5'),
   (Domain == 'const' -> DomainWritten = 'constant';
    Domain == 'cumul' -> DomainWritten = 'cumulative';
    Domain == 'vary' -> DomainWritten = 'varying'),
    write('%----Include axioms for Modal logic '), write(LogicWritten), write(' under '), write(DomainWritten), write(' domains'), nl,
    write('include('), put(39), write('Axioms/LCL013^0.ax'), 
   (Domain == 'const' -> write('.const');
    Domain == 'cumul' -> write('.cumul');
    Domain == 'vary' -> write('.vary')),
    put(39), write(').'), nl,
    write('include('), put(39), write('Axioms/LCL013^'),
   (Logic == 'k' -> write('1');
    Logic == 'k' -> write('k4');
    Logic == 'd' -> write('2');
    Logic == 'd4' -> write('d4');
    Logic == 't' ->  write('3');
    Logic == 'm' -> write('3');
    Logic == 'b' -> write('4');
    Logic == 's4' -> write('5');
    Logic == 's5' -> write('6')),
    write('.ax'), put(39), write(').'), nl,
    write('%------------------------------------------------------------------------------'), nl,
    (retract(mlogic(_))->true;true),
     assert(mlogic(Logic)),
    (retract(mdomain(_))->true;true),
     assert(mdomain(Domain)),
    output_type(Formulae),
    output_thf_formulae(Formulae),
    nl.

%----------------------------------------------------------------------
%----Provide information about the thf format.
thf_format_information('%','.thf').
%----------------------------------------------------------------------
%----Provide information about the TPTP file.
thf_file_information(format,thf).
%----------------------------------------------------------------------
   

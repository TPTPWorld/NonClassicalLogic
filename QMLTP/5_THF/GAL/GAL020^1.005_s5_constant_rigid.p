%------------------------------------------------------------------------------
% File     : NTF001^1 : TPTP v8.1.0. Released v8.1.0.
% Domain   : TBA
% Problem  : TBA
% Version  : TBA
% English  : TBA

% Refs     : [RO12]  Raths & Otten (2012), The QMLTP Problem Library for Fi
%          : [Ste22] Steen (2022), An Extensible Logic Embedding Tool for L
% Source   : [TPTP]
% Names    : GAL020+1 [QMLTP]

% Status   : Unknown 
% Rating   : ? v8.1.0
% Syntax   : Number of formulae    :   53 (  11 unt;  26 typ;  10 def)
%            Number of atoms       :  587 (  10 equ;   0 cnn)
%            Maximal formula atoms :  219 (  21 avg)
%            Number of connectives : 1239 (   1   ~;   1   |;   3   &;1230   @)
%                                         (   1 <=>;   3  =>;   0  <=;   0 <~>)
%            Maximal formula depth :   51 (  11 avg)
%            Number of types       :    3 (   1 usr)
%            Number of type conns  :   66 (  66   >;   0   *;   0   +;   0  <<)
%            Number of symbols     :   26 (  25 usr;   9 con; 0-3 aty)
%            Number of variables   :   53 (  45   ^   6   !;   2   ?;  53   :)
% SPC      : TH0_THM_EQU_NAR

% Comments : This output was generated by embedproblem, version 1.7.1 (library
%            version 1.3). Generated on Thu Apr 28 13:18:18 EDT 2022 using
%            'modal' embedding, version 1.5.2. Logic specification used:
%            $modal == [$constants == $rigid,$quantification == $constant,
%            $modalities == $modal_system_S5].
%------------------------------------------------------------------------------
thf(mworld,type,
    mworld: $tType ).

thf(mrel_type,type,
    mrel: mworld > mworld > $o ).

thf(mactual_type,type,
    mactual: mworld ).

thf(mlocal_type,type,
    mlocal: ( mworld > $o ) > $o ).

thf(mlocal_def,definition,
    ( mlocal
    = ( ^ [Phi: mworld > $o] : ( Phi @ mactual ) ) ) ).

thf(mnot_type,type,
    mnot: ( mworld > $o ) > mworld > $o ).

thf(mand_type,type,
    mand: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mor_type,type,
    mor: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mimplies_type,type,
    mimplies: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mequiv_type,type,
    mequiv: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mnot_def,definition,
    ( mnot
    = ( ^ [A: mworld > $o,W: mworld] :
          ~ ( A @ W ) ) ) ).

thf(mand_def,definition,
    ( mand
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          & ( B @ W ) ) ) ) ).

thf(mor_def,definition,
    ( mor
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          | ( B @ W ) ) ) ) ).

thf(mimplies_def,definition,
    ( mimplies
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
         => ( B @ W ) ) ) ) ).

thf(mequiv_def,definition,
    ( mequiv
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
        <=> ( B @ W ) ) ) ) ).

thf(mbox_type,type,
    mbox: ( mworld > $o ) > mworld > $o ).

thf(mbox_def,definition,
    ( mbox
    = ( ^ [Phi: mworld > $o,W: mworld] :
        ! [V: mworld] :
          ( ( mrel @ W @ V )
         => ( Phi @ V ) ) ) ) ).

thf(mdia_type,type,
    mdia: ( mworld > $o ) > mworld > $o ).

thf(mdia_def,definition,
    ( mdia
    = ( ^ [Phi: mworld > $o,W: mworld] :
        ? [V: mworld] :
          ( ( mrel @ W @ V )
          & ( Phi @ V ) ) ) ) ).

thf(mrel_reflexive,axiom,
    ! [W: mworld] : ( mrel @ W @ W ) ).

thf(mrel_euclidean,axiom,
    ! [W: mworld,V: mworld,U: mworld] :
      ( ( ( mrel @ W @ U )
        & ( mrel @ W @ V ) )
     => ( mrel @ U @ V ) ) ).

thf(mforall_di_type,type,
    mforall_di: ( $i > mworld > $o ) > mworld > $o ).

thf(mforall_di_def,definition,
    ( mforall_di
    = ( ^ [A: $i > mworld > $o,W: mworld] :
        ! [X: $i] : ( A @ X @ W ) ) ) ).

thf(mexists_di_type,type,
    mexists_di: ( $i > mworld > $o ) > mworld > $o ).

thf(mexists_di_def,definition,
    ( mexists_di
    = ( ^ [A: $i > mworld > $o,W: mworld] :
        ? [X: $i] : ( A @ X @ W ) ) ) ).

thf(e11_decl,type,
    e11: $i ).

thf(e10_decl,type,
    e10: $i ).

thf(e13_decl,type,
    e13: $i ).

thf(e12_decl,type,
    e12: $i ).

thf(e20_decl,type,
    e20: $i ).

thf(e22_decl,type,
    e22: $i ).

thf(e21_decl,type,
    e21: $i ).

thf(e23_decl,type,
    e23: $i ).

thf(qmltpeq_decl,type,
    qmltpeq: $i > $i > mworld > $o ).

thf(op2_decl,type,
    op2: $i > $i > $i ).

thf(op1_decl,type,
    op1: $i > $i > $i ).

thf(h_decl,type,
    h: $i > $i ).

thf(j_decl,type,
    j: $i > $i ).

thf(reflexivity,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [X: $i] : ( mbox @ ( qmltpeq @ X @ X ) ) ) ) ) ).

thf(symmetry,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [X: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [Y: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ X @ Y ) ) @ ( mbox @ ( qmltpeq @ Y @ X ) ) ) ) ) ) ) ) ) ).

thf(transitivity,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [X: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [Y: $i] :
                  ( mbox
                  @ ( mforall_di
                    @ ^ [Z: $i] : ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( qmltpeq @ X @ Y ) ) @ ( mbox @ ( qmltpeq @ Y @ Z ) ) ) @ ( mbox @ ( qmltpeq @ X @ Z ) ) ) ) ) ) ) ) ) ) ) ).

thf(h_substitution_1,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( h @ A ) @ ( h @ B ) ) ) ) ) ) ) ) ) ) ).

thf(j_substitution_1,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( j @ A ) @ ( j @ B ) ) ) ) ) ) ) ) ) ) ).

thf(op1_substitution_1,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] :
                  ( mbox
                  @ ( mforall_di
                    @ ^ [C: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( op1 @ A @ C ) @ ( op1 @ B @ C ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(op1_substitution_2,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] :
                  ( mbox
                  @ ( mforall_di
                    @ ^ [C: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( op1 @ C @ A ) @ ( op1 @ C @ B ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(op2_substitution_1,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] :
                  ( mbox
                  @ ( mforall_di
                    @ ^ [C: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( op2 @ A @ C ) @ ( op2 @ B @ C ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(op2_substitution_2,axiom,
    ( mlocal
    @ ( mbox
      @ ( mforall_di
        @ ^ [A: $i] :
            ( mbox
            @ ( mforall_di
              @ ^ [B: $i] :
                  ( mbox
                  @ ( mforall_di
                    @ ^ [C: $i] : ( mbox @ ( mimplies @ ( mbox @ ( qmltpeq @ A @ B ) ) @ ( mbox @ ( qmltpeq @ ( op2 @ C @ A ) @ ( op2 @ C @ B ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(ax1,axiom,
    mlocal @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e11 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e13 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e13 ) ) ) ) @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e12 @ e13 ) ) ) ) ) ) ) ) ) ).

thf(ax2,axiom,
    mlocal @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e20 @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e20 @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e20 @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e21 @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e21 @ e23 ) ) ) ) @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e22 @ e23 ) ) ) ) ) ) ) ) ) ).

thf(ax3,axiom,
    mlocal @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e10 @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e11 @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e12 @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e12 @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e12 @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e12 @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e13 @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e13 @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e13 @ e22 ) ) ) ) @ ( mbox @ ( mnot @ ( mbox @ ( qmltpeq @ e13 @ e23 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(ax4,axiom,
    mlocal @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e10 @ e10 ) @ e10 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e10 @ e11 ) @ e11 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e10 @ e12 ) @ e12 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e10 @ e13 ) @ e13 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e11 @ e10 ) @ e11 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e11 @ e11 ) @ e10 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e11 @ e12 ) @ e13 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e11 @ e13 ) @ e12 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e12 @ e10 ) @ e12 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e12 @ e11 ) @ e13 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e12 @ e12 ) @ e10 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e12 @ e13 ) @ e11 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e13 @ e10 ) @ e13 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e13 @ e11 ) @ e12 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op1 @ e13 @ e12 ) @ e11 ) ) @ ( mbox @ ( qmltpeq @ ( op1 @ e13 @ e13 ) @ e10 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(ax5,axiom,
    mlocal @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e20 @ e20 ) @ e20 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e20 @ e21 ) @ e21 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e20 @ e22 ) @ e22 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e20 @ e23 ) @ e23 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e21 @ e20 ) @ e21 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e21 @ e21 ) @ e23 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e21 @ e22 ) @ e20 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e21 @ e23 ) @ e22 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e22 @ e20 ) @ e22 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e22 @ e21 ) @ e20 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e22 @ e22 ) @ e23 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e22 @ e23 ) @ e21 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e23 @ e20 ) @ e23 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e23 @ e21 ) @ e22 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( op2 @ e23 @ e22 ) @ e21 ) ) @ ( mbox @ ( qmltpeq @ ( op2 @ e23 @ e23 ) @ e20 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).

thf(co1,conjecture,
    mlocal @ ( mbox @ ( mimplies @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e10 ) @ e20 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e10 ) @ e21 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e10 ) @ e22 ) ) @ ( mbox @ ( qmltpeq @ ( h @ e10 ) @ e23 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e11 ) @ e20 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e11 ) @ e21 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e11 ) @ e22 ) ) @ ( mbox @ ( qmltpeq @ ( h @ e11 ) @ e23 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e12 ) @ e20 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e12 ) @ e21 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e12 ) @ e22 ) ) @ ( mbox @ ( qmltpeq @ ( h @ e12 ) @ e23 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e13 ) @ e20 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e13 ) @ e21 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( h @ e13 ) @ e22 ) ) @ ( mbox @ ( qmltpeq @ ( h @ e13 ) @ e23 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e20 ) @ e10 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e20 ) @ e11 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e20 ) @ e12 ) ) @ ( mbox @ ( qmltpeq @ ( j @ e20 ) @ e13 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e21 ) @ e10 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e21 ) @ e11 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e21 ) @ e12 ) ) @ ( mbox @ ( qmltpeq @ ( j @ e21 ) @ e13 ) ) ) ) ) @ ( mand @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e22 ) @ e10 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e22 ) @ e11 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e22 ) @ e12 ) ) @ ( mbox @ ( qmltpeq @ ( j @ e22 ) @ e13 ) ) ) ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e23 ) @ e10 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e23 ) @ e11 ) ) @ ( mor @ ( mbox @ ( qmltpeq @ ( j @ e23 ) @ e12 ) ) @ ( mbox @ ( qmltpeq @ ( j @ e23 ) @ e13 ) ) ) ) ) ) ) ) ) ) ) ) @ ( mbox @ ( mnot @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e10 @ e10 ) ) @ ( op2 @ ( h @ e10 ) @ ( h @ e10 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e10 @ e11 ) ) @ ( op2 @ ( h @ e10 ) @ ( h @ e11 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e10 @ e12 ) ) @ ( op2 @ ( h @ e10 ) @ ( h @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e10 @ e13 ) ) @ ( op2 @ ( h @ e10 ) @ ( h @ e13 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e11 @ e10 ) ) @ ( op2 @ ( h @ e11 ) @ ( h @ e10 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e11 @ e11 ) ) @ ( op2 @ ( h @ e11 ) @ ( h @ e11 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e11 @ e12 ) ) @ ( op2 @ ( h @ e11 ) @ ( h @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e11 @ e13 ) ) @ ( op2 @ ( h @ e11 ) @ ( h @ e13 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e12 @ e10 ) ) @ ( op2 @ ( h @ e12 ) @ ( h @ e10 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e12 @ e11 ) ) @ ( op2 @ ( h @ e12 ) @ ( h @ e11 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e12 @ e12 ) ) @ ( op2 @ ( h @ e12 ) @ ( h @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e12 @ e13 ) ) @ ( op2 @ ( h @ e12 ) @ ( h @ e13 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e13 @ e10 ) ) @ ( op2 @ ( h @ e13 ) @ ( h @ e10 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e13 @ e11 ) ) @ ( op2 @ ( h @ e13 ) @ ( h @ e11 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e13 @ e12 ) ) @ ( op2 @ ( h @ e13 ) @ ( h @ e12 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( op1 @ e13 @ e13 ) ) @ ( op2 @ ( h @ e13 ) @ ( h @ e13 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e20 @ e20 ) ) @ ( op1 @ ( j @ e20 ) @ ( j @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e20 @ e21 ) ) @ ( op1 @ ( j @ e20 ) @ ( j @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e20 @ e22 ) ) @ ( op1 @ ( j @ e20 ) @ ( j @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e20 @ e23 ) ) @ ( op1 @ ( j @ e20 ) @ ( j @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e21 @ e20 ) ) @ ( op1 @ ( j @ e21 ) @ ( j @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e21 @ e21 ) ) @ ( op1 @ ( j @ e21 ) @ ( j @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e21 @ e22 ) ) @ ( op1 @ ( j @ e21 ) @ ( j @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e21 @ e23 ) ) @ ( op1 @ ( j @ e21 ) @ ( j @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e22 @ e20 ) ) @ ( op1 @ ( j @ e22 ) @ ( j @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e22 @ e21 ) ) @ ( op1 @ ( j @ e22 ) @ ( j @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e22 @ e22 ) ) @ ( op1 @ ( j @ e22 ) @ ( j @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e22 @ e23 ) ) @ ( op1 @ ( j @ e22 ) @ ( j @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e23 @ e20 ) ) @ ( op1 @ ( j @ e23 ) @ ( j @ e20 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e23 @ e21 ) ) @ ( op1 @ ( j @ e23 ) @ ( j @ e21 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e23 @ e22 ) ) @ ( op1 @ ( j @ e23 ) @ ( j @ e22 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( op2 @ e23 @ e23 ) ) @ ( op1 @ ( j @ e23 ) @ ( j @ e23 ) ) ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( j @ e20 ) ) @ e20 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( j @ e21 ) ) @ e21 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( j @ e22 ) ) @ e22 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( h @ ( j @ e23 ) ) @ e23 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( h @ e10 ) ) @ e10 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( h @ e11 ) ) @ e11 ) ) @ ( mand @ ( mbox @ ( qmltpeq @ ( j @ ( h @ e12 ) ) @ e12 ) ) @ ( mbox @ ( qmltpeq @ ( j @ ( h @ e13 ) ) @ e13 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ).

%------------------------------------------------------------------------------

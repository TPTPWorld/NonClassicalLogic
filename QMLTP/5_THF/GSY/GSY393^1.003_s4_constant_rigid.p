%------------------------------------------------------------------------------
% File     : NTF001^1 : TPTP v8.1.0. Released v8.1.0.
% Domain   : TBA
% Problem  : TBA
% Version  : TBA
% English  : TBA

% Refs     : TBA
% Source   : [TPTP]
% Names    :

% Status   : Theorem
% Rating   : ? b8.1.0
% Syntax   : Number of formulae    :   29 (  14 unt;  14 typ;  14 def)
% SPC      : TH0_THM_EQU_NAR

% Comments : This output was generated by embedproblem, version 1.7.1 (library
%            version 1.3). Generated on Thu Apr 28 13:18:18 EDT 2022 using
%            'modal' embedding, version 1.5.2. Logic specification used:
%            $modal == [$constants == $rigid,$quantification == $constant,
%            $modalities == $modal_system_S4].
%------------------------------------------------------------------------------
thf(mworld,type,
    mworld: $tType ).

thf(mrel_type,type,
    mrel: mworld > mworld > $o ).

thf(mactual_type,type,
    mactual: mworld ).

thf(mlocal_type,type,
    mlocal: ( mworld > $o ) > $o ).

thf(mlocal_def,definition,
    ( mlocal
    = ( ^ [Phi: mworld > $o] : ( Phi @ mactual ) ) ) ).

thf(mnot_type,type,
    mnot: ( mworld > $o ) > mworld > $o ).

thf(mand_type,type,
    mand: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mor_type,type,
    mor: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mimplies_type,type,
    mimplies: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mequiv_type,type,
    mequiv: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mnot_def,definition,
    ( mnot
    = ( ^ [A: mworld > $o,W: mworld] :
          ~ ( A @ W ) ) ) ).

thf(mand_def,definition,
    ( mand
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          & ( B @ W ) ) ) ) ).

thf(mor_def,definition,
    ( mor
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          | ( B @ W ) ) ) ) ).

thf(mimplies_def,definition,
    ( mimplies
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
         => ( B @ W ) ) ) ) ).

thf(mequiv_def,definition,
    ( mequiv
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
        <=> ( B @ W ) ) ) ) ).

thf(mbox_type,type,
    mbox: ( mworld > $o ) > mworld > $o ).

thf(mbox_def,definition,
    ( mbox
    = ( ^ [Phi: mworld > $o,W: mworld] :
        ! [V: mworld] :
          ( ( mrel @ W @ V )
         => ( Phi @ V ) ) ) ) ).

thf(mdia_type,type,
    mdia: ( mworld > $o ) > mworld > $o ).

thf(mdia_def,definition,
    ( mdia
    = ( ^ [Phi: mworld > $o,W: mworld] :
        ? [V: mworld] :
          ( ( mrel @ W @ V )
          & ( Phi @ V ) ) ) ) ).

thf(mrel_reflexive,axiom,
    ! [W: mworld] : ( mrel @ W @ W ) ).

thf(mrel_transitive,axiom,
    ! [W: mworld,V: mworld,U: mworld] :
      ( ( ( mrel @ W @ V )
        & ( mrel @ V @ U ) )
     => ( mrel @ W @ U ) ) ).

thf(p1_decl,type,
    p1: mworld > $o ).

thf(p2_decl,type,
    p2: mworld > $o ).

thf(p3_decl,type,
    p3: mworld > $o ).

thf(pel12,conjecture,
    mlocal @ ( mand @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mbox @ p2 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p1 ) ) ) ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mbox @ p2 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p1 ) ) ) ) ) ) ) @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mbox @ p2 ) ) ) ) ) ) @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mbox @ p2 ) ) ) ) @ ( mbox @ p1 ) ) ) ) ) ) @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mbox @ p2 ) ) ) ) ) ) @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mbox @ p2 ) ) ) ) @ ( mbox @ p1 ) ) ) ) @ ( mand @ ( mbox @ ( mimplies @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mbox @ p2 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p1 ) ) ) ) @ ( mbox @ p3 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p3 ) @ ( mand @ ( mbox @ ( mimplies @ ( mbox @ p1 ) @ ( mbox @ p2 ) ) ) @ ( mbox @ ( mimplies @ ( mbox @ p2 ) @ ( mbox @ p1 ) ) ) ) ) ) ) ) ) ) ).

%------------------------------------------------------------------------------

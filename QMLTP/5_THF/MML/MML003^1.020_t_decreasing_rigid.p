%------------------------------------------------------------------------------
% File     : NTF001^1 : TPTP v8.1.0. Released v8.1.0.
% Domain   : TBA
% Problem  : TBA
% Version  : TBA
% English  : TBA

% Refs     : [Fit07] Fitting (2007), Modal Proof Theory
%          : [RO12]  Raths & Otten (2012), The QMLTP Problem Library for Fi
%          : [Ste22] Steen (2022), An Extensible Logic Embedding Tool for L
% Source   : [TPTP]
% Names    : MML003+1 [QMLTP]

% Status   : Unknown 
% Rating   : ? v8.1.0
% Syntax   : Number of formulae    :   50 (  11 unt;  19 typ;   8 def)
%            Number of atoms       :  311 (   8 equ;   0 cnn)
%            Maximal formula atoms :  126 (  10 avg)
%            Number of connectives :  379 (   1   ~;   1   |;   2   &; 372   @)
%                                         (   1 <=>;   2  =>;   0  <=;   0 <~>)
%            Maximal formula depth :   22 (   6 avg)
%            Number of types       :    3 (   2 usr)
%            Number of type conns  :   52 (  52   >;   0   *;   0   +;   0  <<)
%            Number of symbols     :   18 (  17 usr;   4 con; 0-3 aty)
%            Number of variables   :   26 (  21   ^   4   !;   1   ?;  26   :)
% SPC      : TH0_THM_EQU_NAR

% Comments : This output was generated by embedproblem, version 1.7.1 (library
%            version 1.3). Generated on Thu Apr 28 13:18:18 EDT 2022 using
%            'modal' embedding, version 1.5.2. Logic specification used:
%            $modal == [$constants == $rigid,$quantification == $decreasing,
%            $modalities == $modal_system_T].
%------------------------------------------------------------------------------
thf(mworld,type,
    mworld: $tType ).

thf(mindex,type,
    mindex: $tType ).

thf(mrel_type,type,
    mrel: mindex > mworld > mworld > $o ).

thf('#c_type',type,
    '#c': mindex ).

thf('#b_type',type,
    '#b': mindex ).

thf('#a_type',type,
    '#a': mindex ).

thf(mactual_type,type,
    mactual: mworld ).

thf(mlocal_type,type,
    mlocal: ( mworld > $o ) > $o ).

thf(mlocal_def,definition,
    ( mlocal
    = ( ^ [Phi: mworld > $o] : ( Phi @ mactual ) ) ) ).

thf(mnot_type,type,
    mnot: ( mworld > $o ) > mworld > $o ).

thf(mand_type,type,
    mand: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mor_type,type,
    mor: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mimplies_type,type,
    mimplies: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mequiv_type,type,
    mequiv: ( mworld > $o ) > ( mworld > $o ) > mworld > $o ).

thf(mnot_def,definition,
    ( mnot
    = ( ^ [A: mworld > $o,W: mworld] :
          ~ ( A @ W ) ) ) ).

thf(mand_def,definition,
    ( mand
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          & ( B @ W ) ) ) ) ).

thf(mor_def,definition,
    ( mor
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
          | ( B @ W ) ) ) ) ).

thf(mimplies_def,definition,
    ( mimplies
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
         => ( B @ W ) ) ) ) ).

thf(mequiv_def,definition,
    ( mequiv
    = ( ^ [A: mworld > $o,B: mworld > $o,W: mworld] :
          ( ( A @ W )
        <=> ( B @ W ) ) ) ) ).

thf(mbox_type,type,
    mbox: mindex > ( mworld > $o ) > mworld > $o ).

thf(mbox_def,definition,
    ( mbox
    = ( ^ [R: mindex,Phi: mworld > $o,W: mworld] :
        ! [V: mworld] :
          ( ( mrel @ R @ W @ V )
         => ( Phi @ V ) ) ) ) ).

thf(mdia_type,type,
    mdia: mindex > ( mworld > $o ) > mworld > $o ).

thf(mdia_def,definition,
    ( mdia
    = ( ^ [R: mindex,Phi: mworld > $o,W: mworld] :
        ? [V: mworld] :
          ( ( mrel @ R @ W @ V )
          & ( Phi @ V ) ) ) ) ).

thf('mrel_#c_reflexive',axiom,
    ! [W: mworld] : ( mrel @ '#c' @ W @ W ) ).

thf('mrel_#b_reflexive',axiom,
    ! [W: mworld] : ( mrel @ '#b' @ W @ W ) ).

thf('mrel_#a_reflexive',axiom,
    ! [W: mworld] : ( mrel @ '#a' @ W @ W ) ).

thf(mfb_decl,type,
    mfb: mworld > $o ).

thf(mfa_decl,type,
    mfa: mworld > $o ).

thf(mfc_decl,type,
    mfc: mworld > $o ).

thf(s_decl,type,
    s: mworld > $o ).

thf(what_a_knows_about_b,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#a' @ mfb ) @ ( mbox @ '#a' @ ( mnot @ mfb ) ) ) ) ).

thf(what_a_knows_about_c,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#a' @ mfc ) @ ( mbox @ '#a' @ ( mnot @ mfc ) ) ) ) ).

thf(what_b_knows_about_a,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#b' @ mfa ) @ ( mbox @ '#b' @ ( mnot @ mfa ) ) ) ) ).

thf(what_b_knows_about_c,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#b' @ mfc ) @ ( mbox @ '#b' @ ( mnot @ mfc ) ) ) ) ).

thf(what_c_knows_about_a,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(what_c_knows_about_b,axiom,
    mlocal @ ( mbox @ '#a' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(what_a_knows_about_b_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#a' @ mfb ) @ ( mbox @ '#a' @ ( mnot @ mfb ) ) ) ) ).

thf(what_a_knows_about_c_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#a' @ mfc ) @ ( mbox @ '#a' @ ( mnot @ mfc ) ) ) ) ).

thf(what_b_knows_about_a_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#b' @ mfa ) @ ( mbox @ '#b' @ ( mnot @ mfa ) ) ) ) ).

thf(what_b_knows_about_c_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#b' @ mfc ) @ ( mbox @ '#b' @ ( mnot @ mfc ) ) ) ) ).

thf(what_c_knows_about_a_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(what_c_knows_about_b_0,axiom,
    mlocal @ ( mbox @ '#b' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(what_a_knows_about_b_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#a' @ mfb ) @ ( mbox @ '#a' @ ( mnot @ mfb ) ) ) ) ).

thf(what_a_knows_about_c_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#a' @ mfc ) @ ( mbox @ '#a' @ ( mnot @ mfc ) ) ) ) ).

thf(what_b_knows_about_a_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#b' @ mfa ) @ ( mbox @ '#b' @ ( mnot @ mfa ) ) ) ) ).

thf(what_b_knows_about_c_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#b' @ mfc ) @ ( mbox @ '#b' @ ( mnot @ mfc ) ) ) ) ).

thf(what_c_knows_about_a_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(what_c_knows_about_b_1,axiom,
    mlocal @ ( mbox @ '#c' @ ( mor @ ( mbox @ '#c' @ mfa ) @ ( mbox @ '#c' @ ( mnot @ mfa ) ) ) ) ).

thf(someone_knows_its_forhead,axiom,
    mlocal @ ( mequiv @ s @ ( mor @ ( mbox @ '#a' @ ( mor @ mfa @ ( mnot @ mfa ) ) ) @ ( mor @ ( mbox @ '#b' @ ( mor @ mfb @ ( mnot @ mfb ) ) ) @ ( mbox @ '#c' @ ( mor @ mfc @ ( mnot @ mfc ) ) ) ) ) ) ).

thf(con,conjecture,
    mlocal @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mnot @ ( mimplies @ ( mbox @ '#a' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mand @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mnot @ ( mimplies @ ( mbox @ '#b' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mnot @ ( mimplies @ ( mbox @ '#c' @ ( mor @ mfa @ ( mor @ mfb @ mfc ) ) ) @ s ) ) ) @ s ) ) ) ) ) ) ) ) ) ) ).

%------------------------------------------------------------------------------

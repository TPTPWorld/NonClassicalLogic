%%% This output was generated by embedproblem, version 1.7.2 (library version 1.3).
%%% Generated on Fri May 06 13:26:10 EDT 2022
%%% using 'modal' embedding, version 1.5.3.
%%% Logic specification used:
%%% tff(s5_varying_rigid, logic, ($modal) == ([($constants) == ($rigid),($quantification) == ($varying),($modalities) == ($modal_system_S5U)])).

thf(mworld, type, mworld: $tType).
thf(mindex, type, mindex: $tType).
thf(mrel_type, type, mrel: (mindex > (mworld > (mworld > $o)))).
thf('#pour_b_type', type, '#pour_b': mindex).
thf('#make_c_type', type, '#make_c': mindex).
thf('#pour_a_type', type, '#pour_a': mindex).
thf(mactual_type, type, mactual: mworld).
thf(mlocal_type, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
thf(mnot_type, type, mnot: ((mworld > $o) > (mworld > $o))).
thf(mand_type, type, mand: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mor_type, type, mor: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mimplies_type, type, mimplies: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mequiv_type, type, mequiv: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mnot_def, definition, (mnot = (^ [A:(mworld > $o),W:mworld]: ((~ ((A @ W))))))).
thf(mand_def, definition, (mand = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) & (B @ W)))))).
thf(mor_def, definition, (mor = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) | (B @ W)))))).
thf(mimplies_def, definition, (mimplies = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) => (B @ W)))))).
thf(mequiv_def, definition, (mequiv = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) <=> (B @ W)))))).
thf(mbox_type, type, mbox: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mbox_def, definition, (mbox = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: (((((mrel @ R) @ W) @ V) => (Phi @ V)))))))).
thf(mdia_type, type, mdia: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mdia_def, definition, (mdia = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: (((((mrel @ R) @ W) @ V) & (Phi @ V)))))))).
thf('mrel_#pour_b_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#pour_b') @ W) @ V)))).
thf('mrel_#make_c_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#make_c') @ W) @ V)))).
thf('mrel_#pour_a_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#pour_a') @ W) @ V)))).
%%% This output was generated by tptputils, version 1.2.
%%% Generated on Wed Apr 27 15:49:37 CEST 2022 using command 'downgrade(tff)'.
thf(acid_decl, type, acid: (mworld > $o)).
thf(pour_ab_make_axiom_1, axiom, (mlocal @ ((mimplies @ ((mbox @ '#pour_a') @ ((mbox @ '#pour_b') @ acid))) @ ((mbox @ '#make_c') @ acid)))).
thf(pour_ab_make_axiom_2, axiom, (mlocal @ ((mimplies @ ((mbox @ '#pour_a') @ ((mbox @ '#pour_b') @ (mnot @ acid)))) @ ((mbox @ '#make_c') @ (mnot @ acid))))).
thf(pour_ba_make_axiom_1, axiom, (mlocal @ ((mimplies @ ((mbox @ '#pour_b') @ ((mbox @ '#pour_a') @ acid))) @ ((mbox @ '#make_c') @ acid)))).
thf(pour_ba_make_axiom_2, axiom, (mlocal @ ((mimplies @ ((mbox @ '#pour_b') @ ((mbox @ '#pour_a') @ (mnot @ acid)))) @ ((mbox @ '#make_c') @ (mnot @ acid))))).
thf(pour_a_acid, axiom, (mlocal @ ((mbox @ '#pour_a') @ (mnot @ acid)))).
thf(make_c_acid, axiom, (mlocal @ ((mdia @ '#make_c') @ acid))).
thf(conj, conjecture, (mlocal @ ((mand @ ((mdia @ '#pour_a') @ (mnot @ acid))) @ ((mdia @ '#pour_a') @ ((mdia @ '#pour_b') @ acid))))).

%%% This output was generated by embedproblem, version 1.7.2 (library version 1.3).
%%% Generated on Fri May 06 13:26:40 EDT 2022
%%% using 'modal' embedding, version 1.5.3.
%%% Logic specification used:
%%% tff(s5_cumulative_rigid, logic, ($modal) == ([($constants) == ($rigid),($quantification) == ($cumulative),($modalities) == ($modal_system_S5U)])).

thf(mworld, type, mworld: $tType).
thf(mindex, type, mindex: $tType).
thf(mrel_type, type, mrel: (mindex > (mworld > (mworld > $o)))).
thf('#i_alice_type', type, '#i_alice': mindex).
thf('#i_bob_type', type, '#i_bob': mindex).
thf('#b_alice_type', type, '#b_alice': mindex).
thf('#alice_type', type, '#alice': mindex).
thf('#b_bob_type', type, '#b_bob': mindex).
thf(mactual_type, type, mactual: mworld).
thf(mlocal_type, type, mlocal: ((mworld > $o) > $o)).
thf(mlocal_def, definition, (mlocal = (^ [Phi:(mworld > $o)]: ((Phi @ mactual))))).
thf(mnot_type, type, mnot: ((mworld > $o) > (mworld > $o))).
thf(mand_type, type, mand: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mor_type, type, mor: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mimplies_type, type, mimplies: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mequiv_type, type, mequiv: ((mworld > $o) > ((mworld > $o) > (mworld > $o)))).
thf(mnot_def, definition, (mnot = (^ [A:(mworld > $o),W:mworld]: ((~ ((A @ W))))))).
thf(mand_def, definition, (mand = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) & (B @ W)))))).
thf(mor_def, definition, (mor = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) | (B @ W)))))).
thf(mimplies_def, definition, (mimplies = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) => (B @ W)))))).
thf(mequiv_def, definition, (mequiv = (^ [A:(mworld > $o),B:(mworld > $o),W:mworld]: (((A @ W) <=> (B @ W)))))).
thf(mbox_type, type, mbox: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mbox_def, definition, (mbox = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((! [V:mworld]: (((((mrel @ R) @ W) @ V) => (Phi @ V)))))))).
thf(mdia_type, type, mdia: (mindex > ((mworld > $o) > (mworld > $o)))).
thf(mdia_def, definition, (mdia = (^ [R:mindex,Phi:(mworld > $o),W:mworld]: ((? [V:mworld]: (((((mrel @ R) @ W) @ V) & (Phi @ V)))))))).
thf('mrel_#i_alice_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#i_alice') @ W) @ V)))).
thf('mrel_#i_bob_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#i_bob') @ W) @ V)))).
thf('mrel_#b_alice_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#b_alice') @ W) @ V)))).
thf('mrel_#alice_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#alice') @ W) @ V)))).
thf('mrel_#b_bob_universal', axiom, (! [W:mworld,V:mworld]: ((((mrel @ '#b_bob') @ W) @ V)))).
%%% This output was generated by tptputils, version 1.2.
%%% Generated on Wed Apr 27 15:49:41 CEST 2022 using command 'downgrade(tff)'.
thf(portland_decl, type, portland: $i).
thf(bigcity_decl, type, bigcity: ($i > (mworld > $o))).
thf(beautycity_decl, type, beautycity: ($i > (mworld > $o))).
thf(axiom_1_a, axiom, (mlocal @ ((mimplies @ ((mbox @ '#b_alice') @ (bigcity @ portland))) @ (mnot @ ((mbox @ '#i_alice') @ (bigcity @ portland)))))).
thf(axiom_1_b, axiom, (mlocal @ ((mimplies @ ((mbox @ '#b_bob') @ (bigcity @ portland))) @ (mnot @ ((mbox @ '#i_bob') @ (bigcity @ portland)))))).
thf(axiom_1_c, axiom, (mlocal @ ((mimplies @ ((mbox @ '#b_alice') @ (beautycity @ portland))) @ (mnot @ ((mbox @ '#i_alice') @ (beautycity @ portland)))))).
thf(axiom_1_d, axiom, (mlocal @ ((mimplies @ ((mbox @ '#b_bob') @ (beautycity @ portland))) @ (mnot @ ((mbox @ '#i_bob') @ (beautycity @ portland)))))).
thf(axiom_2, axiom, (mlocal @ ((mbox @ '#b_alice') @ ((mor @ ((mbox @ '#b_bob') @ ((mbox @ '#b_alice') @ (bigcity @ portland)))) @ ((mbox @ '#b_bob') @ ((mbox @ '#b_alice') @ (beautycity @ portland))))))).
thf(con, conjecture, (mlocal @ ((mbox @ '#b_alice') @ ((mand @ ((mbox @ '#b_bob') @ ((mimplies @ ((mbox @ '#alice') @ (bigcity @ portland))) @ (mnot @ ((mbox @ '#i_alice') @ (bigcity @ portland)))))) @ ((mimplies @ ((mbox @ '#alice') @ (beautycity @ portland))) @ (mnot @ ((mbox @ '#i_alice') @ (beautycity @ portland)))))))).
